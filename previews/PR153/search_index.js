var documenterSearchIndex = {"docs":
[{"location":"style/#Julia-Coding-Style-Guide-for-SIIP","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"","category":"section"},{"location":"style/#Goals","page":"Julia Coding Style Guide for SIIP","title":"Goals","text":"","category":"section"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Define a straightforward set of rules that lead to consistent, readable","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"code.","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Developers focus on producing high quality code, not how to format it.","category":"page"},{"location":"style/#Base","page":"Julia Coding Style Guide for SIIP","title":"Base","text":"","category":"section"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Follow the official","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Julia style guide except for deviations noted here.","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Follow Julia contribution guidelines, notably its line length","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"limit.","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Follow Julia guidelines for docstrings.\nFollow JuMP coding standards,","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"including its deviations from the Julia style guide.  In particular, note its policies on","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"whitespace\nreturn statements\nvariable names.\nRead The Zen of Python.\nConsider using a plugin that configures your text editor to use EditorConfig settings.","category":"page"},{"location":"style/#Code-Organization","page":"Julia Coding Style Guide for SIIP","title":"Code Organization","text":"","category":"section"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Import standard modules, then 3rd-party modules, then yours. Include a blank","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"line between each group.","category":"page"},{"location":"style/#Modules:-TODO","page":"Julia Coding Style Guide for SIIP","title":"Modules:  TODO","text":"","category":"section"},{"location":"style/#Comments","page":"Julia Coding Style Guide for SIIP","title":"Comments","text":"","category":"section"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Use comments to describe non-obvious or non-trivial aspects of code.","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Describe why something was done but not how.  The \"how\" should be apparent from the code itself.","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Use complete sentences and proper grammar.\nInclude a space in between the \"#\" and the first word of the comment.\nUse these tags in comments to describe known work:\nTODO:  tasks that need to be done\nFIXME:  code that needs refactoring\nBUG:  known bug that exists. Should include a bug ID and tracking system.\nPERF:  known performance limitation that needs improvement","category":"page"},{"location":"style/#Constructors","page":"Julia Coding Style Guide for SIIP","title":"Constructors","text":"","category":"section"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Per guidance from Julia documentation, use inner constructors to enforce","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"restrictions on parameters or to allow construction of self-referential objects. Use outer constructors to provide default values or to perform customization.","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Document the reason why the outer constructor is different.\nNote that the compiler will provide a default constructor with all struct","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"members if no inner constructor is defined.","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"When creating a constructor use \"function Foo()\" instead of \"Foo() = ...\"","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"One exception is the case where one file has all single-line functions.","category":"page"},{"location":"style/#Exceptions","page":"Julia Coding Style Guide for SIIP","title":"Exceptions","text":"","category":"section"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Use exceptions for unexpected errors and not for normal error handling.\nDetection of an unsupported data format from a user should likely throw","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"an exception and terminate the application.","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Do not use try/catch to handle retrieving a potentially-missing key from a","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"dictionary.","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Use @assert statements to guard against programming errors. Do not use them","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"after detecting bad user input. Note that they may be compiled out in release builds.","category":"page"},{"location":"style/#Globals","page":"Julia Coding Style Guide for SIIP","title":"Globals","text":"","category":"section"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Global constants should use UPPER_CASE and be declared const.\nIf global variables are needed, prefix them with \"g_\".\nDon't use magic numbers. Instead, define const globals or Enums (Julia","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"@enum).","category":"page"},{"location":"style/#One-line-Conditionals","page":"Julia Coding Style Guide for SIIP","title":"One-line Conditionals","text":"","category":"section"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Julia code base uses this idiom frequently:  <cond> && <statement> Example:","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"function fact(n::Int)\n   n >= 0 || error(\"n must be non-negative\")\n   n == 0 && return 1\n   n * fact(n-1)\nend","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"This is acceptable for simple code as in this example. However, in general, prefer to write out an entire if statement.","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Ternary operators provide a way to write clean, concise code.  Use good judgement.","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Good:","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"y = x > 0 ? x : -x","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"There are many examples in our codebase that use the form <cond> ? <statement> : <statement>.  These can be expressed much more clearly in an if/else statement.","category":"page"},{"location":"style/#Unit-Tests","page":"Julia Coding Style Guide for SIIP","title":"Unit Tests","text":"","category":"section"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"All code should be tested.","category":"page"},{"location":"style/#Whitespace","page":"Julia Coding Style Guide for SIIP","title":"Whitespace","text":"","category":"section"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"If many function arguments cause the line length to be exceeded, put one","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"argument per line. In some cases it may make sense to pair some variables on the same line.","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"function foo(var1::String,\n             var2::String,\n             var3::String,\n             var4::String,\n             var5::String,\n             var6::String)","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Do not surround equal signs with spaces when passing keyword args to a","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"function or defining default values in function declarations.","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Do not right-align equal signs when assigning groups of variables. It causes","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"unnecessary changes whenever someone adds a new variable with a longer name.","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Bad:","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"x   = 1\nfoo = 2","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Good:","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"x = 1\nfoo = 2","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Define abstract types on one line. Given the lack of IDE support for Julia,","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"this makes it easier to find type definitions.","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Bad:","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"abstract type\n    Foo\nend","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"Good:","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"","category":"page"},{"location":"style/","page":"Julia Coding Style Guide for SIIP","title":"Julia Coding Style Guide for SIIP","text":"abstract type Foo end","category":"page"},{"location":"user_guide/installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"user_guide/installation/","page":"Installation","title":"Installation","text":"The latest stable release of PowerSystems can be installed using the Julia package manager with","category":"page"},{"location":"user_guide/installation/","page":"Installation","title":"Installation","text":"] add InfrastructureSystems","category":"page"},{"location":"user_guide/installation/","page":"Installation","title":"Installation","text":"For the current development version, \"checkout\" this package with","category":"page"},{"location":"user_guide/installation/","page":"Installation","title":"Installation","text":"] add InfrastructureSystems#master","category":"page"},{"location":"user_guide/installation/#Getting-test-data-to-start-with-some-data","page":"Installation","title":"Getting test data to start with some data","text":"","category":"section"},{"location":"user_guide/logging/#Logging","page":"Logging","title":"Logging","text":"","category":"section"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"This document describes logging facilities available in the modules that use InfrastructureSystems. The examples assume the following imports:","category":"page"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"import Logging\nimport InfrastructureSystems: configure_logging, open_file_logger, MultiLogger, LogEventTracker","category":"page"},{"location":"user_guide/logging/#Use-Cases","page":"Logging","title":"Use Cases","text":"","category":"section"},{"location":"user_guide/logging/#Enable-logging-in-REPL-or-Jupyter-Notebook","page":"Logging","title":"Enable logging in REPL or Jupyter Notebook","text":"","category":"section"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"Use configure_logging to create a logger with your preferences (console and/or file, levels, etc.).","category":"page"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"Note: log messages are not automatically flushed to files. Call flush(logger) to make this happen.","category":"page"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"Example: Global logger configuration","category":"page"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"logger = configure_logging(; filename=\"log.txt\")\n@info \"hello world\"\nflush(logger)\n@error \"some error\"\nclose(logger)","category":"page"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"The function provides lots of customization. Refer to the docstring for complete details.","category":"page"},{"location":"user_guide/logging/#Log-to-console-and-file-in-an-application-or-unit-test-environment.","page":"Logging","title":"Log to console and file in an application or unit test environment.","text":"","category":"section"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"Create a MultiLogger from Logging.ConsoleLogger and Logging.SimpleLogger. Use open_file_logger to guarantee that all messages get flushed to the file.","category":"page"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"Example Multilogger configuration","category":"page"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"console_logger = ConsoleLogger(stderr, Logging.Error)\n\nopen_file_logger(\"log.txt\", Logging.Info) do file_logger\n    multi_logger = MultiLogger([console_logger, file_logger])\n    global_logger(multi_logger)\n\n    do_stuff()\nend","category":"page"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"Note: If someone may execute the code in the REPL then wrap that code in a try/finally block and reset the global logger upon exit.","category":"page"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"function run_tests()\n    console_logger = ConsoleLogger(stderr, Logging.Error)\n\n    open_file_logger(\"log.txt\", Logging.Info) do file_logger\n        multi_logger = MultiLogger([console_logger, file_logger])\n        global_logger(multi_logger)\n\n        do_stuff()\n    end\nend\n\nlogger = global_logger()\n\ntry\n    run_tests()\nfinally\n    # Guarantee that the global logger is reset.\n    global_logger(logger)\n    nothing\nend","category":"page"},{"location":"user_guide/logging/#Suppress-frequent-messages","page":"Logging","title":"Suppress frequent messages","text":"","category":"section"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"The standard Logging module in Julia provides a method to suppress messages. Tag the log message with maxlog=X.","category":"page"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"for i in range(1, length=100)\n    @error \"something happened\" i maxlog=2\nend","category":"page"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"Only 2 messages will get logged.","category":"page"},{"location":"user_guide/logging/#Get-a-summary-of-log-messages","page":"Logging","title":"Get a summary of log messages","text":"","category":"section"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"By default a MultiLogger creates a LogEventTracker that keeps counts of all messages. Call report_log_summary after execution.","category":"page"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"logger = configure_logging(; filename=\"log.txt\")\n@info \"hello world\"\n\n# Include a summary in the log file.\n@info report_log_summary(logger)\nclose(logger)","category":"page"},{"location":"user_guide/logging/","page":"Logging","title":"Logging","text":"julia> for i in range(1, length=100)\n           @info \"hello\" maxlog=2\n           @warn \"beware\" maxlog=2\n       end\njulia> @info report_log_summary(logger)\n┌ Info:\n│ Log message summary:\n│\n│ 0 Error events:\n│\n│ 1 Warn events:\n│   count=100 at REPL[19]:3\n│     example message=\"beware\"\n│     suppressed=98\n│\n│ 1 Info events:\n│   count=100 at REPL[19]:2\n│     example message=\"hello\"\n└     suppressed=98","category":"page"},{"location":"api/InfrastructureSystems/#InfrastructureSystems","page":"API","title":"InfrastructureSystems","text":"","category":"section"},{"location":"api/InfrastructureSystems/","page":"API","title":"API","text":"Modules = [InfrastructureSystems]\nOrder = [:type, :function]","category":"page"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.DataFormatError","page":"API","title":"InfrastructureSystems.DataFormatError","text":"Thrown upon detection of user data that is not supported.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Deterministic","page":"API","title":"InfrastructureSystems.Deterministic","text":"mutable struct Deterministic <: AbstractDeterministic\n    name::String\n    resolution::Dates.Period\n    data::SortedDict{Dates.DateTime, Vector}\n    scaling_factor_multiplier::Union{Nothing, Function}\n    internal::InfrastructureSystemsInternal\nend\n\nA deterministic forecast for a particular data field in a Component.\n\nArguments\n\nname::String: user-defined name\nresolution::Dates.Period: forecast resolution\ndata::SortedDict{Dates.DateTime, Vector}: timestamp - scalingfactor\nscaling_factor_multiplier::Union{Nothing, Function}: Applicable when the time series data are scaling factors. Called on the associated component to convert the values.\ninternal::InfrastructureSystemsInternal\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Deterministic-Tuple{AbstractString,AbstractDict{Dates.DateTime,#s23} where #s23,Dates.Period}","page":"API","title":"InfrastructureSystems.Deterministic","text":"Deterministic(name::AbstractString, input_data::AbstractDict{Dates.DateTime,#s23} where #s23, resolution::Dates.Period; normalization_factor, scaling_factor_multiplier) -> InfrastructureSystems.Deterministic\n\n\nConstruct Deterministic from a Dict of collections of data.\n\nArguments\n\nname::AbstractString: user-defined name\ninput_data::AbstractDict{Dates.DateTime, Any}: time series data. The values in the dictionary should be able to be converted to Float64.\nresolution::Dates.Period: The resolution of the forecast in Dates.Period`\nnormalization_factor::NormalizationFactor = 1.0: optional normalization factor to apply to each data entry\nscaling_factor_multiplier::Union{Nothing, Function} = nothing: If the data are scaling factors then this function will be called on the component and applied to the data when get_time_series_array is called.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Deterministic-Tuple{AbstractString,AbstractDict{Dates.DateTime,#s93} where #s93<:TimeSeries.TimeArray}","page":"API","title":"InfrastructureSystems.Deterministic","text":"Deterministic(name::AbstractString, input_data::AbstractDict{Dates.DateTime,#s93} where #s93<:TimeSeries.TimeArray; normalization_factor, scaling_factor_multiplier) -> InfrastructureSystems.Deterministic\n\n\nConstruct Deterministic from a Dict of TimeArrays.\n\nArguments\n\nname::AbstractString: user-defined name\ninput_data::AbstractDict{Dates.DateTime, TimeSeries.TimeArray}: time series data.\nnormalization_factor::NormalizationFactor = 1.0: optional normalization factor to apply to each data entry\nscaling_factor_multiplier::Union{Nothing, Function} = nothing: If the data are scaling factors then this function will be called on the component and applied to the data when get_time_series_array is called.\ntimestamp = :timestamp: If the values are DataFrames is passed then this must be the column name that contains timestamps.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Deterministic-Tuple{AbstractString,AbstractString,InfrastructureSystems.InfrastructureSystemsComponent,Dates.Period}","page":"API","title":"InfrastructureSystems.Deterministic","text":"Deterministic(name::AbstractString, filename::AbstractString, component::InfrastructureSystems.InfrastructureSystemsComponent, resolution::Dates.Period; normalization_factor, scaling_factor_multiplier) -> InfrastructureSystems.Deterministic\n\n\nConstruct Deterministic from a CSV file. The first column must be a timestamp in DateTime format and the columns the values in the forecast window.\n\nArguments\n\nname::AbstractString: user-defined name\nfilename::AbstractString: name of CSV file containing data\ncomponent::InfrastructureSystemsComponent: component associated with the data\nnormalization_factor::NormalizationFactor = 1.0: optional normalization factor to apply to each data entry\nscaling_factor_multiplier::Union{Nothing, Function} = nothing: If the data are scaling factors then this function will be called on the component and applied to the data when get_time_series_array is called.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Deterministic-Tuple{AbstractString,InfrastructureSystems.RawTimeSeries,Dates.Period}","page":"API","title":"InfrastructureSystems.Deterministic","text":"Deterministic(name::AbstractString, series_data::InfrastructureSystems.RawTimeSeries, resolution::Dates.Period; normalization_factor, scaling_factor_multiplier) -> InfrastructureSystems.Deterministic\n\n\nConstruct Deterministic from RawTimeSeries.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Deterministic-Tuple{InfrastructureSystems.Deterministic,DataStructures.SortedDict{Dates.DateTime,Array{T,1} where T,Ord} where Ord<:Base.Order.Ordering}","page":"API","title":"InfrastructureSystems.Deterministic","text":"Deterministic(forecast::InfrastructureSystems.Deterministic, data::DataStructures.SortedDict{Dates.DateTime,Array{T,1} where T,Ord} where Ord<:Base.Order.Ordering) -> InfrastructureSystems.Deterministic\n\n\nConstruct a new Deterministic from an existing instance and a subset of data.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.DeterministicMetadata","page":"API","title":"InfrastructureSystems.DeterministicMetadata","text":"mutable struct DeterministicMetadata <: ForecastMetadata\n    name::String\n    resolution::Dates.Period\n    initial_timestamp::Dates.DateTime\n    interval::Dates.Period\n    count::Int\n    time_series_uuid::UUIDs.UUID\n    horizon::Int\n    scaling_factor_multiplier::Union{Nothing, Function}\n    internal::InfrastructureSystemsInternal\nend\n\nA deterministic forecast for a particular data field in a Component.\n\nArguments\n\nname::String: user-defined name\nresolution::Dates.Period\ninitial_timestamp::Dates.DateTime: time series availability time\ninterval::Dates.Period: time step between forecast windows\ncount::Int: number of forecast windows\ntime_series_uuid::UUIDs.UUID: reference to time series data\nhorizon::Int: length of this time series\nscaling_factor_multiplier::Union{Nothing, Function}: Applicable when the time series data are scaling factors. Called on the associated component to convert the values.\ninternal::InfrastructureSystemsInternal\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.DeterministicSingleTimeSeries","page":"API","title":"InfrastructureSystems.DeterministicSingleTimeSeries","text":"mutable struct DeterministicSingleTimeSeries <: AbstractDeterministic\n    single_time_series::SingleTimeSeries\n    initial_timestamp::Dates.DateTime\n    interval::Dates.Period\n    count::Int\n    horizon::Int\nend\n\nA deterministic forecast for a particular data field in a Component that wraps a SingleTimeSeries.\n\nArguments\n\nsingle_time_series::SingleTimeSeries: wrapped SingleTimeSeries object\ninitial_timestamp::Dates.DateTime: time series availability time\ninterval::Dates.Period: time step between forecast windows\ncount::Int: number of forecast windows\nhorizon::Int: length of this time series\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.DeviceParameter","page":"API","title":"InfrastructureSystems.DeviceParameter","text":"Base type for auxillary structs. These should not be stored in a system.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.FileLogger","page":"API","title":"InfrastructureSystems.FileLogger","text":"Specializes the behavior of SimpleLogger by adding timestamps and process and thread IDs.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.FlattenIteratorWrapper","page":"API","title":"InfrastructureSystems.FlattenIteratorWrapper","text":"Wrapper around Iterators.Flatten to provide total length.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Hdf5TimeSeriesStorage","page":"API","title":"InfrastructureSystems.Hdf5TimeSeriesStorage","text":"Stores all time series data in an HDF5 file.\n\nThe file used is assumed to be temporary and will be automatically deleted when there are no more references to the storage object.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Hdf5TimeSeriesStorage-Tuple{Bool}","page":"API","title":"InfrastructureSystems.Hdf5TimeSeriesStorage","text":"Hdf5TimeSeriesStorage(create_file::Bool; filename, directory, read_only) -> InfrastructureSystems.Hdf5TimeSeriesStorage\n\n\nConstructs Hdf5TimeSeriesStorage.\n\nArguments\n\ncreate_file::Bool: create new file\nfilename=nothing: if nothing, create a temp file, else use this name.\ndirectory=nothing: if set and filename is nothing, create a temp file in this  directory. Use tempdir() if not set. This should be set if the time series data is larger  than the tmp filesystem can hold.\nread_only = false: If true, don't allow changes to the file. Allows simultaneous read  access.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Hdf5TimeSeriesStorage-Tuple{}","page":"API","title":"InfrastructureSystems.Hdf5TimeSeriesStorage","text":"Hdf5TimeSeriesStorage() -> InfrastructureSystems.Hdf5TimeSeriesStorage\n\n\nConstructs Hdf5TimeSeriesStorage by creating a temp file.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.InMemoryTimeSeriesStorage","page":"API","title":"InfrastructureSystems.InMemoryTimeSeriesStorage","text":"Stores all time series data in memory.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.InMemoryTimeSeriesStorage-Tuple{InfrastructureSystems.Hdf5TimeSeriesStorage}","page":"API","title":"InfrastructureSystems.InMemoryTimeSeriesStorage","text":"InMemoryTimeSeriesStorage(hdf5_storage::InfrastructureSystems.Hdf5TimeSeriesStorage) -> InfrastructureSystems.InMemoryTimeSeriesStorage\n\n\nConstructs InMemoryTimeSeriesStorage from an instance of Hdf5TimeSeriesStorage.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.InfrastructureSystemsComponent","page":"API","title":"InfrastructureSystems.InfrastructureSystemsComponent","text":"Base type for structs that are stored in a system.\n\nRequired interface functions for subtypes:\n\nget_name()\nget_internal()\n\nOptional interface functions:\n\ngettimeseries_container()\n\nSubtypes may contain time series.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.InfrastructureSystemsInternal","page":"API","title":"InfrastructureSystems.InfrastructureSystemsInternal","text":"Internal storage common to InfrastructureSystems types.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.InfrastructureSystemsInternal-Tuple{Base.UUID}","page":"API","title":"InfrastructureSystems.InfrastructureSystemsInternal","text":"InfrastructureSystemsInternal(u::Base.UUID) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nCreates InfrastructureSystemsInternal with an existing UUID.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.InfrastructureSystemsInternal-Tuple{}","page":"API","title":"InfrastructureSystems.InfrastructureSystemsInternal","text":"InfrastructureSystemsInternal(; uuid, units_info, ext) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nCreates InfrastructureSystemsInternal with a new UUID.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.InfrastructureSystemsType","page":"API","title":"InfrastructureSystems.InfrastructureSystemsType","text":"Base type for any struct in the SIIP packages. All structs must implement a kwarg-only constructor to allow deserializing from a Dict.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.LazyDictFromIterator-Union{Tuple{V}, Tuple{K}, Tuple{Type{K},Type{V},Any,Function}} where V where K","page":"API","title":"InfrastructureSystems.LazyDictFromIterator","text":"LazyDictFromIterator creates a dictionary from an iterator, but only increments the iterator and adds items to the dictionary as it needs them. In the worst case it is identical to creating a dictionary by iterating over the entire list. Each V should have a K member.\n\nArguments\n\nK: type of the dictionary keys\nV: type of the dictionary values\niter: any object implementing the Iterator interface\ngetter::Function: method to call on V to get its K\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.LogEvent","page":"API","title":"InfrastructureSystems.LogEvent","text":"Contains information describing a log event.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.LogEventTracker","page":"API","title":"InfrastructureSystems.LogEventTracker","text":"LogEventTracker() -> InfrastructureSystems.LogEventTracker\nLogEventTracker(levels::Any) -> InfrastructureSystems.LogEventTracker\n\n\nTracks counts of all log events by level.\n\nExamples\n\nLogEventTracker()\nLogEventTracker((Logging.Info, Logging.Warn, Logging.Error))\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.MultiLogger","page":"API","title":"InfrastructureSystems.MultiLogger","text":"Redirects log events to multiple loggers. The primary use case is to allow logging to both a file and the console. Secondarily, it can track the counts of all log messages.\n\nExample\n\nMultiLogger([ConsoleLogger(stderr), SimpleLogger(stream)], LogEventTracker())\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.MultiLogger-Union{Tuple{Array{T,N} where N}, Tuple{T}} where T<:Base.CoreLogging.AbstractLogger","page":"API","title":"InfrastructureSystems.MultiLogger","text":"MultiLogger(loggers::Array{T<:Base.CoreLogging.AbstractLogger,N} where N) -> InfrastructureSystems.MultiLogger\n\n\nCreates a MultiLogger with no event tracking.\n\nExample\n\nMultiLogger([ConsoleLogger(stderr), SimpleLogger(stream)])\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Probabilistic","page":"API","title":"InfrastructureSystems.Probabilistic","text":"mutable struct Probabilistic <: Forecast\n    name::String\n    resolution::Dates.Period\n    percentiles::Vector{Float64}\n    data::SortedDict{Dates.DateTime, Array}\n    scaling_factor_multiplier::Union{Nothing, Function}\n    internal::InfrastructureSystemsInternal\nend\n\nA Probabilistic forecast for a particular data field in a Component.\n\nArguments\n\nname::String: user-defined name\nresolution::Dates.Period: forecast resolution\npercentiles::Vector{Float64}: Percentiles for the probabilistic forecast\ndata::SortedDict{Dates.DateTime, Array}: timestamp - scalingfactor\nscaling_factor_multiplier::Union{Nothing, Function}: Applicable when the time series data are scaling factors. Called on the associated component to convert the values.\ninternal::InfrastructureSystemsInternal\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Probabilistic-Tuple{AbstractString,AbstractDict{Dates.DateTime,#s93} where #s93<:TimeSeries.TimeArray,Array{Float64,1}}","page":"API","title":"InfrastructureSystems.Probabilistic","text":"Probabilistic(name::AbstractString, input_data::AbstractDict{Dates.DateTime,#s93} where #s93<:TimeSeries.TimeArray, percentiles::Array{Float64,1}; normalization_factor, scaling_factor_multiplier) -> InfrastructureSystems.Probabilistic\n\n\nConstruct Probabilistic from a Dict of TimeArrays.\n\nArguments\n\nname::AbstractString: user-defined name\ninput_data::AbstractDict{Dates.DateTime, TimeSeries.TimeArray}: time series data.\npercentiles: Percentiles represented in the probabilistic forecast\nnormalization_factor::NormalizationFactor = 1.0: optional normalization factor to apply to each data entry\nscaling_factor_multiplier::Union{Nothing, Function} = nothing: If the data are scaling factors then this function will be called on the component and applied to the data when get_time_series_array is called.\ntimestamp = :timestamp: If the values are DataFrames is passed then this must be the column name that contains timestamps.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Probabilistic-Tuple{AbstractString,AbstractDict{Dates.DateTime,Array{Float64,2}},Array{Float64,1},Dates.Period}","page":"API","title":"InfrastructureSystems.Probabilistic","text":"Probabilistic(name::AbstractString, input_data::AbstractDict{Dates.DateTime,Array{Float64,2}}, percentiles::Array{Float64,1}, resolution::Dates.Period; normalization_factor, scaling_factor_multiplier) -> InfrastructureSystems.Probabilistic\n\n\nConstruct Probabilistic from a SortedDict of Arrays.\n\nArguments\n\nname::AbstractString: user-defined name\ninput_data::AbstractDict{Dates.DateTime, Matrix{Float64}}: time series data.\npercentiles: Percentiles represented in the probabilistic forecast\nresolution::Dates.Period: The resolution of the forecast in Dates.Period`\nnormalization_factor::NormalizationFactor = 1.0: optional normalization factor to apply to each data entry\nscaling_factor_multiplier::Union{Nothing, Function} = nothing: If the data are scaling factors then this function will be called on the component and applied to the data when get_time_series_array is called.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Probabilistic-Tuple{AbstractString,InfrastructureSystems.RawTimeSeries,Array{Float64,1},Dates.Period}","page":"API","title":"InfrastructureSystems.Probabilistic","text":"Probabilistic(name::AbstractString, series_data::InfrastructureSystems.RawTimeSeries, percentiles::Array{Float64,1}, resolution::Dates.Period; normalization_factor, scaling_factor_multiplier) -> InfrastructureSystems.Probabilistic\n\n\nConstruct Deterministic from RawTimeSeries.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.ProbabilisticMetadata","page":"API","title":"InfrastructureSystems.ProbabilisticMetadata","text":"mutable struct ProbabilisticMetadata <: ForecastMetadata\n    name::String\n    initial_timestamp::Dates.DateTime\n    resolution::Dates.Period\n    interval::Dates.Period\n    count::Int\n    percentiles::Vector{Float64}\n    time_series_uuid::UUIDs.UUID\n    horizon::Int\n    scaling_factor_multiplier::Union{Nothing, Function}\n    internal::InfrastructureSystemsInternal\nend\n\nA Probabilistic forecast for a particular data field in a Component.\n\nArguments\n\nname::String: user-defined name\ninitial_timestamp::Dates.DateTime: time series availability time\nresolution::Dates.Period\ninterval::Dates.Period: time step between forecast windows\ncount::Int: number of forecast windows\npercentiles::Vector{Float64}: Percentiles for the probabilistic forecast\ntime_series_uuid::UUIDs.UUID: reference to time series data\nhorizon::Int: length of this time series\nscaling_factor_multiplier::Union{Nothing, Function}: Applicable when the time series data are scaling factors. Called on the associated component to convert the values.\ninternal::InfrastructureSystemsInternal\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.RawTimeSeries","page":"API","title":"InfrastructureSystems.RawTimeSeries","text":"Wraps the data read from the text files with time series\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Recorder","page":"API","title":"InfrastructureSystems.Recorder","text":"Records user-defined events in JSON format.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Recorder-Tuple{Symbol}","page":"API","title":"InfrastructureSystems.Recorder","text":"Recorder(name::Symbol; io, mode, directory) -> InfrastructureSystems.Recorder\n\n\nConstruct a Recorder.\n\nArguments\n\nname::Symbol: name of recorder\nio::Union{Nothing, IO}:  If nothing, record events in a file using name.\nmode = \"w\":  Only used when io is nothing.\ndirectory = \".\":  Only used when io is nothing.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Results","page":"API","title":"InfrastructureSystems.Results","text":"To implement a sub-type of this you need to implement the methods below.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Scenarios","page":"API","title":"InfrastructureSystems.Scenarios","text":"mutable struct Scenarios <: Forecast\n    name::String\n    resolution::Dates.Period\n    scenario_count::Int64\n    data::SortedDict{Dates.DateTime, Array}\n    scaling_factor_multiplier::Union{Nothing, Function}\n    internal::InfrastructureSystemsInternal\nend\n\nA Discrete Scenario Based time series for a particular data field in a Component.\n\nArguments\n\nname::String: user-defined name\nresolution::Dates.Period: forecast resolution\nscenario_count::Int64: Number of scenarios\ndata::SortedDict{Dates.DateTime, Array}: timestamp - scalingfactor\nscaling_factor_multiplier::Union{Nothing, Function}: Applicable when the time series data are scaling factors. Called on the associated component to convert the values.\ninternal::InfrastructureSystemsInternal\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Scenarios-Tuple{AbstractString,AbstractDict{Dates.DateTime,#s93} where #s93<:TimeSeries.TimeArray}","page":"API","title":"InfrastructureSystems.Scenarios","text":"Scenarios(name::AbstractString, input_data::AbstractDict{Dates.DateTime,#s93} where #s93<:TimeSeries.TimeArray; normalization_factor, scaling_factor_multiplier) -> InfrastructureSystems.Scenarios\n\n\nConstruct Scenarios from a Dict of TimeArrays.\n\nArguments\n\nname::AbstractString: user-defined name\ninput_data::AbstractDict{Dates.DateTime, TimeSeries.TimeArray}: time series data.\nnormalization_factor::NormalizationFactor = 1.0: optional normalization factor to apply to each data entry\nscaling_factor_multiplier::Union{Nothing, Function} = nothing: If the data are scaling factors then this function will be called on the component and applied to the data when get_time_series_array is called.\ntimestamp = :timestamp: If the values are DataFrames is passed then this must be the column name that contains timestamps.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.Scenarios-Tuple{AbstractString,AbstractDict{Dates.DateTime,Array{Float64,2}},Dates.Period}","page":"API","title":"InfrastructureSystems.Scenarios","text":"Scenarios(name::AbstractString, input_data::AbstractDict{Dates.DateTime,Array{Float64,2}}, resolution::Dates.Period; normalization_factor, scaling_factor_multiplier) -> InfrastructureSystems.Scenarios\n\n\nConstruct Scenarios from a SortedDict of Arrays.\n\nArguments\n\nname::AbstractString: user-defined name\ninput_data::AbstractDict{Dates.DateTime, Matrix{Float64}}: time series data.\nresolution::Dates.Period: The resolution of the forecast in Dates.Period`\nnormalization_factor::NormalizationFactor = 1.0: optional normalization factor to apply to each data entry\nscaling_factor_multiplier::Union{Nothing, Function} = nothing: If the data are scaling factors then this function will be called on the component and applied to the data when get_time_series_array is called.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.ScenariosMetadata","page":"API","title":"InfrastructureSystems.ScenariosMetadata","text":"mutable struct ScenariosMetadata <: ForecastMetadata\n    name::String\n    resolution::Dates.Period\n    initial_timestamp::Dates.DateTime\n    interval::Dates.Period\n    scenario_count::Int64\n    count::Int\n    time_series_uuid::UUIDs.UUID\n    horizon::Int\n    scaling_factor_multiplier::Union{Nothing, Function}\n    internal::InfrastructureSystemsInternal\nend\n\nA Discrete Scenario Based time series for a particular data field in a Component.\n\nArguments\n\nname::String: user-defined name\nresolution::Dates.Period\ninitial_timestamp::Dates.DateTime: time series availability time\ninterval::Dates.Period: time step between forecast windows\nscenario_count::Int64: Number of scenarios\ncount::Int: number of forecast windows\ntime_series_uuid::UUIDs.UUID: reference to time series data\nhorizon::Int: length of this time series\nscaling_factor_multiplier::Union{Nothing, Function}: Applicable when the time series data are scaling factors. Called on the associated component to convert the values.\ninternal::InfrastructureSystemsInternal\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.SingleTimeSeries","page":"API","title":"InfrastructureSystems.SingleTimeSeries","text":"mutable struct SingleTimeSeries <: StaticTimeSeries\n    name::String\n    data::TimeSeries.TimeArray\n    scaling_factor_multiplier::Union{Nothing, Function}\n    internal::InfrastructureSystemsInternal\nend\n\nA deterministic forecast for a particular data field in a Component.\n\nArguments\n\nname::String: user-defined name\ndata::TimeSeries.TimeArray: timestamp - scalingfactor\nscaling_factor_multiplier::Union{Nothing, Function}: Applicable when the time series data are scaling factors. Called on the associated component to convert the values.\ninternal::InfrastructureSystemsInternal\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.SingleTimeSeries-Tuple{AbstractString,AbstractString,InfrastructureSystems.InfrastructureSystemsComponent}","page":"API","title":"InfrastructureSystems.SingleTimeSeries","text":"SingleTimeSeries(name::AbstractString, filename::AbstractString, component::InfrastructureSystems.InfrastructureSystemsComponent; normalization_factor, scaling_factor_multiplier)\n\n\nConstruct SingleTimeSeries from a CSV file. The file must have a column that is the name of the component.\n\nArguments\n\nname::AbstractString: user-defined name\nfilename::AbstractString: name of CSV file containing data\ncomponent::InfrastructureSystemsComponent: component associated with the data\nnormalization_factor::NormalizationFactor = 1.0: optional normalization factor to apply to each data entry\nscaling_factor_multiplier::Union{Nothing, Function} = nothing: If the data are scaling factors then this function will be called on the component and applied to the data when get_time_series_array is called.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.SingleTimeSeries-Tuple{AbstractString,Union{DataFrames.DataFrame, TimeSeries.TimeArray}}","page":"API","title":"InfrastructureSystems.SingleTimeSeries","text":"SingleTimeSeries(name::AbstractString, data::Union{DataFrames.DataFrame, TimeSeries.TimeArray}; normalization_factor, scaling_factor_multiplier, timestamp) -> InfrastructureSystems.SingleTimeSeries\n\n\nConstruct SingleTimeSeries from a TimeArray or DataFrame.\n\nArguments\n\nname::AbstractString: user-defined name\ndata::Union{TimeSeries.TimeArray, DataFrames.DataFrame}: time series data\nnormalization_factor::NormalizationFactor = 1.0: optional normalization factor to apply to each data entry\nscaling_factor_multiplier::Union{Nothing, Function} = nothing: If the data are scaling factors then this function will be called on the component and applied to the data when get_time_series_array is called.\ntimestamp = :timestamp: If a DataFrame is passed then this must be the column name that contains timestamps.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.SingleTimeSeries-Tuple{InfrastructureSystems.SingleTimeSeries,TimeSeries.TimeArray}","page":"API","title":"InfrastructureSystems.SingleTimeSeries","text":"SingleTimeSeries(time_series::InfrastructureSystems.SingleTimeSeries, data::TimeSeries.TimeArray) -> Any\n\n\nCreates a new SingleTimeSeries from an existing instance and a subset of data.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.SingleTimeSeries-Tuple{String,Dates.Period,Dates.DateTime,Int64}","page":"API","title":"InfrastructureSystems.SingleTimeSeries","text":"SingleTimeSeries(name::String, resolution::Dates.Period, initial_time::Dates.DateTime, time_steps::Int64) -> InfrastructureSystems.SingleTimeSeries\n\n\nConstruct SingleTimeSeries after constructing a TimeArray from initial_time and time_steps.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.SingleTimeSeriesMetadata","page":"API","title":"InfrastructureSystems.SingleTimeSeriesMetadata","text":"mutable struct SingleTimeSeriesMetadata <: StaticTimeSeriesMetadata\n    name::String\n    resolution::Dates.Period\n    initial_timestamp::Dates.DateTime\n    time_series_uuid::UUIDs.UUID\n    length::Int\n    scaling_factor_multiplier::Union{Nothing, Function}\n    internal::InfrastructureSystemsInternal\nend\n\nA TimeSeries Data object in contigous form.\n\nArguments\n\nname::String: user-defined name\nresolution::Dates.Period\ninitial_timestamp::Dates.DateTime: time series availability time\ntime_series_uuid::UUIDs.UUID: reference to time series data\nlength::Int: length of this time series\nscaling_factor_multiplier::Union{Nothing, Function}: Applicable when the time series data are scaling factors. Called on the associated component to convert the values.\ninternal::InfrastructureSystemsInternal\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.SystemData","page":"API","title":"InfrastructureSystems.SystemData","text":"mutable struct SystemData <: InfrastructureSystemsType\n    components::Components\n    time_series_params::TimeSeriesParameters\n    validation_descriptors::Vector\n    time_series_storage::TimeSeriesStorage\n    time_series_storage_file::Union{Nothing, String}\n    internal::InfrastructureSystemsInternal\nend\n\nContainer for system components and time series data\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.SystemData-Tuple{}","page":"API","title":"InfrastructureSystems.SystemData","text":"SystemData(; validation_descriptor_file, time_series_in_memory, time_series_directory) -> InfrastructureSystems.SystemData\n\n\nConstruct SystemData to store components and time series data.\n\nArguments\n\nvalidation_descriptor_file = nothing: Optionally, a file defining component validation descriptors.\ntime_series_in_memory = false: Controls whether time series data is stored in memory or in a file.\ntimeseriesdirectory = nothing`: Controls what directory time series data is stored in. Default is tempdir().\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.TimeSeriesContainer","page":"API","title":"InfrastructureSystems.TimeSeriesContainer","text":"Time series container for a component.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.TimeSeriesData","page":"API","title":"InfrastructureSystems.TimeSeriesData","text":"Abstract type for time series stored in the system. Components store references to these through TimeSeriesMetadata values so that data can reside on storage media instead of memory.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.TimeSeriesFileMetadata","page":"API","title":"InfrastructureSystems.TimeSeriesFileMetadata","text":"Describes how to construct time_series from raw time series data files.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.TimeSeriesMetadata","page":"API","title":"InfrastructureSystems.TimeSeriesMetadata","text":"Abstract type for time_series that are stored in a system. Users never create them or get access to them. Stores references to TimeSeriesData.\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.TimeSeriesStorage","page":"API","title":"InfrastructureSystems.TimeSeriesStorage","text":"Abstract type for time series storage implementations.\n\nAll subtypes must implement:\n\nserializetimeseries!\naddtimeseries_reference!\nremovetimeseries!\ndeserializetimeseries\ncleartimeseries!\ngetnumtime_series\ncheckreadonly\n\n\n\n\n\n","category":"type"},{"location":"api/InfrastructureSystems/#Base.close-Tuple{InfrastructureSystems.MultiLogger}","page":"API","title":"Base.close","text":"close(logger::InfrastructureSystems.MultiLogger)\n\n\nEnsures that any file streams are flushed and closed.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#Base.flush-Tuple{InfrastructureSystems.MultiLogger}","page":"API","title":"Base.flush","text":"flush(logger::InfrastructureSystems.MultiLogger)\n\n\nFlush any file streams.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#Base.get-Union{Tuple{K}, Tuple{InfrastructureSystems.LazyDictFromIterator,K}} where K","page":"API","title":"Base.get","text":"get(container::InfrastructureSystems.LazyDictFromIterator, key::K) -> Any\n\n\nReturns the item mapped to key. If the key is already stored then it will be returned with a dictionary lookup. If it has not been stored then iterate over the list until it is found.\n\nReturns nothing if key is not found.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems._get_all_concrete_subtypes-Union{Tuple{T}, Tuple{Type{T},Array{DataType,1}}} where T","page":"API","title":"InfrastructureSystems._get_all_concrete_subtypes","text":"_get_all_concrete_subtypes(_::Type{T}, sub_types::Array{DataType,1})\n\n\nRecursively builds a vector of subtypes.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems._remove_item!-Tuple{HDF5.HDF5Group,AbstractString,AbstractString}","page":"API","title":"InfrastructureSystems._remove_item!","text":"_remove_item!(path::HDF5.HDF5Group, name::AbstractString, value::AbstractString) -> Bool\n\n\nRemoves value from the dataset called name. Returns true if the array is empty afterwards.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems._validate_component-Union{Tuple{T}, Tuple{InfrastructureSystems.SystemData,T}} where T<:InfrastructureSystems.InfrastructureSystemsComponent","page":"API","title":"InfrastructureSystems._validate_component","text":"_validate_component(data::InfrastructureSystems.SystemData, component::T<:InfrastructureSystems.InfrastructureSystemsComponent)\n\n\nChecks that the component exists in data and the UUID's match.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.add_component!-Union{Tuple{T}, Tuple{InfrastructureSystems.Components,T}} where T<:InfrastructureSystems.InfrastructureSystemsComponent","page":"API","title":"InfrastructureSystems.add_component!","text":"Add a component.\n\nThrows ArgumentError if the component's name is already stored for its concrete type.\n\nThrows InvalidRange if any of the component's field values are outside of defined valid range.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.add_serialization_metadata!-Union{Tuple{T}, Tuple{Dict,Type{T}}} where T","page":"API","title":"InfrastructureSystems.add_serialization_metadata!","text":"add_serialization_metadata!(data::Dict, _::Type{T})\n\n\nAdd type information to the dictionary that can be used to deserialize the value.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.add_time_series!-Tuple{InfrastructureSystems.SystemData,Any,InfrastructureSystems.TimeSeriesData}","page":"API","title":"InfrastructureSystems.add_time_series!","text":"add_time_series!(data::InfrastructureSystems.SystemData, components::Any, time_series::InfrastructureSystems.TimeSeriesData)\n\n\nAdd the same time series data to multiple components.\n\nArguments\n\ndata::SystemData: SystemData\ncomponents: iterable of components that will store the same time series reference\ntime_series::TimeSeriesData: Any object of subtype TimeSeriesData\n\nThis is significantly more efficent than calling add_time_series! for each component individually with the same data because in this case, only one time series array is stored.\n\nThrows ArgumentError if a component is not stored in the system.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.add_time_series!-Tuple{InfrastructureSystems.SystemData,InfrastructureSystems.InfrastructureSystemsComponent,InfrastructureSystems.TimeSeriesData}","page":"API","title":"InfrastructureSystems.add_time_series!","text":"add_time_series!(data::InfrastructureSystems.SystemData, component::InfrastructureSystems.InfrastructureSystemsComponent, time_series::InfrastructureSystems.TimeSeriesData; skip_if_present)\n\n\nAdd time series data to a component.\n\nArguments\n\ndata::SystemData: SystemData\ncomponent::InfrastructureSystemsComponent: will store the time series reference\ntime_series::TimeSeriesData: Any object of subtype TimeSeriesData\n\nThrows ArgumentError if the component is not stored in the system.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.add_time_series_from_file_metadata!-Union{Tuple{T}, Tuple{InfrastructureSystems.SystemData,Type{T},AbstractString}} where T<:InfrastructureSystems.InfrastructureSystemsComponent","page":"API","title":"InfrastructureSystems.add_time_series_from_file_metadata!","text":"add_time_series_from_file_metadata!(data::InfrastructureSystems.SystemData, ::Type{T<:InfrastructureSystems.InfrastructureSystemsComponent}, metadata_file::AbstractString; resolution)\n\n\nAdds time_series from a metadata file or metadata descriptors.\n\nArguments\n\ndata::SystemData: system\n::Type{T}: type of the component associated with time series data; may be abstract\nmetadata_file::AbstractString: metadata file for time series that includes an array of TimeSeriesFileMetadata instances or a vector.\nresolution::DateTime.Period=nothing: skip time_series that don't match this resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.add_time_series_from_file_metadata!-Union{Tuple{T}, Tuple{InfrastructureSystems.SystemData,Type{T},Array{InfrastructureSystems.TimeSeriesFileMetadata,1}}} where T<:InfrastructureSystems.InfrastructureSystemsComponent","page":"API","title":"InfrastructureSystems.add_time_series_from_file_metadata!","text":"add_time_series_from_file_metadata!(data::InfrastructureSystems.SystemData, ::Type{T<:InfrastructureSystems.InfrastructureSystemsComponent}, file_metadata::Array{InfrastructureSystems.TimeSeriesFileMetadata,1}; resolution)\n\n\nAdds time series data from a metadata file or metadata descriptors.\n\nArguments\n\ndata::SystemData: system\nfile_metadata::Vector{TimeSeriesFileMetadata}: metadata for time series\nresolution::DateTime.Period=nothing: skip time_series that don't match this resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.assign_new_uuid!-Tuple{InfrastructureSystems.InfrastructureSystemsType}","page":"API","title":"InfrastructureSystems.assign_new_uuid!","text":"assign_new_uuid!(obj::InfrastructureSystems.InfrastructureSystemsType) -> Base.UUID\n\n\nAssign a new UUID.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.clear_components!-Tuple{InfrastructureSystems.Components}","page":"API","title":"InfrastructureSystems.clear_components!","text":"clear_components!(components::InfrastructureSystems.Components)\n\n\nRemoves all components from the system.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.clear_ext!-Tuple{InfrastructureSystems.InfrastructureSystemsInternal}","page":"API","title":"InfrastructureSystems.clear_ext!","text":"clear_ext!(obj::InfrastructureSystems.InfrastructureSystemsInternal)\n\n\nClear any value stored in ext.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.compare_values-Union{Tuple{T}, Tuple{T,T}} where T","page":"API","title":"InfrastructureSystems.compare_values","text":"compare_values(x::T, y::T) -> Bool\n\n\nRecursively compares struct values by performing == on each field in the struct. When performing == on values of immutable structs Julia will perform === on each field.  This will return false if any field is mutable even if the contents are the same.  So, comparison of any InfrastructureSystems type with an array will fail.\n\nThis is an unresolved Julia issue. Refer to https://github.com/JuliaLang/julia/issues/4648.\n\nAn option is to overload == for all subtypes of PowerSystemType. That may not be appropriate in all cases. Until the Julia developers decide on a solution, this function is provided for convenience for specific comparisons.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.configure_logging-Tuple{}","page":"API","title":"InfrastructureSystems.configure_logging","text":"configure_logging(; console, console_stream, console_level, file, filename, file_level, file_mode, tracker, set_global) -> InfrastructureSystems.MultiLogger\n\n\nCreates console and file loggers per caller specification and returns a MultiLogger.\n\nNote: If logging to a file users must call Base.close() on the returned MultiLogger to ensure that all events get flushed.\n\nArguments\n\nconsole::Bool=true: create console logger\nconsole_stream::IOStream=stderr: stream for console logger\nconsole_level::Logging.LogLevel=Logging.Error: level for console messages\nfile::Bool=true: create file logger\nfilename::String=log.txt: log file\nfile_level::Logging.LogLevel=Logging.Info: level for file messages\nfile_mode::String=w+: mode used when opening log file\ntracker::Union{LogEventTracker, Nothing}=LogEventTracker(): optionally track log events\nset_global::Bool=true: set the created logger as the global logger\n\nExample\n\nlogger = configure_logging(filename=\"mylog.txt\")\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.copy_time_series!-Tuple{InfrastructureSystems.InfrastructureSystemsComponent,InfrastructureSystems.InfrastructureSystemsComponent}","page":"API","title":"InfrastructureSystems.copy_time_series!","text":"copy_time_series!(dst::InfrastructureSystems.InfrastructureSystemsComponent, src::InfrastructureSystems.InfrastructureSystemsComponent; name_mapping, scaling_factor_multiplier_mapping)\n\n\nEfficiently add all time_series in one component to another by copying the underlying references.\n\nArguments\n\ndst::InfrastructureSystemsComponent: Destination component\nsrc::InfrastructureSystemsComponent: Source component\nname_mapping::Dict = nothing: Optionally map src names to different dst names. If provided and src has a timeseries with a name not present in namemapping, that timeseries will not copied. If namemapping is nothing then all time_series will be copied with src's names.\nscaling_factor_multiplier_mapping::Dict = nothing: Optionally map src multipliers to different dst multipliers.  If provided and src has a timeseries with a multiplier not present in scalingfactormultipliermapping, that timeseries will not copied. If scalingfactormultipliermapping is nothing then all time_series will be copied with src's multipliers.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.deserialize-Union{Tuple{T}, Tuple{Type{T},Dict}} where T<:InfrastructureSystems.InfrastructureSystemsType","page":"API","title":"InfrastructureSystems.deserialize","text":"deserialize(_::Type{T<:InfrastructureSystems.InfrastructureSystemsType}, data::Dict) -> InfrastructureSystems.TestComponent\n\n\nDeserialize an object from standard types stored in non-Julia formats, such as JSON, into Julia types.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.from-Tuple{InfrastructureSystems.SingleTimeSeries,Any}","page":"API","title":"InfrastructureSystems.from","text":"from(time_series::InfrastructureSystems.SingleTimeSeries, timestamp::Any) -> InfrastructureSystems.SingleTimeSeries\n\n\nReturn a time_series truncated starting with timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.from_file-Tuple{Type{InfrastructureSystems.Hdf5TimeSeriesStorage},AbstractString}","page":"API","title":"InfrastructureSystems.from_file","text":"from_file(::Type{InfrastructureSystems.Hdf5TimeSeriesStorage}, filename::AbstractString; read_only) -> InfrastructureSystems.Hdf5TimeSeriesStorage\n\n\nConstructs Hdf5TimeSeriesStorage from an existing file.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.from_json-Union{Tuple{T}, Tuple{Type{T},String}} where T<:InfrastructureSystems.InfrastructureSystemsType","page":"API","title":"InfrastructureSystems.from_json","text":"from_json(_::Type{T<:InfrastructureSystems.InfrastructureSystemsType}, filename::String) -> Any\n\n\nDeserializes a InfrastructureSystemsType from a JSON filename.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.from_json-Union{Tuple{T}, Tuple{Union{IO, String},Type{T}}} where T<:InfrastructureSystems.InfrastructureSystemsType","page":"API","title":"InfrastructureSystems.from_json","text":"from_json(io::Union{IO, String}, _::Type{T<:InfrastructureSystems.InfrastructureSystemsType}) -> InfrastructureSystems.TestComponent\n\n\nDeserializes a InfrastructureSystemsType from String or IO.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_abstract_subtypes-Union{Tuple{Type{T}}, Tuple{T}} where T","page":"API","title":"InfrastructureSystems.get_abstract_subtypes","text":"Returns an array of abstract types that are direct subtypes of T.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_all_concrete_subtypes-Union{Tuple{Type{T}}, Tuple{T}} where T","page":"API","title":"InfrastructureSystems.get_all_concrete_subtypes","text":"get_all_concrete_subtypes(_::Type{T}) -> Any\n\n\nReturns an array of all concrete subtypes of T. Note that this does not find parameterized types.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_component-Union{Tuple{T}, Tuple{Type{T},InfrastructureSystems.Components,AbstractString}} where T<:InfrastructureSystems.InfrastructureSystemsComponent","page":"API","title":"InfrastructureSystems.get_component","text":"Get the component of type T with name. Returns nothing if no component matches. If T is an abstract type then the names of components across all subtypes of T must be unique.\n\nSee get_components_by_name for abstract types with non-unique names across subtypes.\n\nThrows ArgumentError if T is not a concrete type and there is more than one component with     requested name\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_components-Union{Tuple{T}, Tuple{Type{T},InfrastructureSystems.Components}, Tuple{Type{T},InfrastructureSystems.Components,Union{Nothing, Function}}} where T<:InfrastructureSystems.InfrastructureSystemsComponent","page":"API","title":"InfrastructureSystems.get_components","text":"get_components(::Type{T<:InfrastructureSystems.InfrastructureSystemsComponent}, components::InfrastructureSystems.Components) -> InfrastructureSystems.FlattenIteratorWrapper{T<:InfrastructureSystems.InfrastructureSystemsComponent}\nget_components(::Type{T<:InfrastructureSystems.InfrastructureSystemsComponent}, components::InfrastructureSystems.Components, filter_func::Union{Nothing, Function}) -> InfrastructureSystems.FlattenIteratorWrapper{T<:InfrastructureSystems.InfrastructureSystemsComponent}\n\n\nReturns an iterator of components. T can be concrete or abstract. Call collect on the result if an array is desired.\n\nArguments\n\nT: component type\ncomponents::Components: Components of the sytem\nfilter_func::Union{Nothing, Function} = nothing: Optional function that accepts a component  of type T and returns a Bool. Apply this function to each component and only return components  where the result is true.\n\nSee also: iterate_components\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_components_by_name-Union{Tuple{T}, Tuple{Type{T},InfrastructureSystems.Components,AbstractString}} where T<:InfrastructureSystems.InfrastructureSystemsComponent","page":"API","title":"InfrastructureSystems.get_components_by_name","text":"get_components_by_name(_::Type{T<:InfrastructureSystems.InfrastructureSystemsComponent}, components::InfrastructureSystems.Components, name::AbstractString) -> Array{T<:InfrastructureSystems.InfrastructureSystemsComponent,1}\n\n\nGet the components of abstract type T with name. Note that InfrastructureSystems enforces unique names on each concrete type but not across concrete types.\n\nSee get_component if the concrete type is known.\n\nThrows ArgumentError if T is not an abstract type.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_concrete_subtypes-Union{Tuple{Type{T}}, Tuple{T}} where T","page":"API","title":"InfrastructureSystems.get_concrete_subtypes","text":"Returns an array of concrete types that are direct subtypes of T.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_count-Tuple{InfrastructureSystems.DeterministicMetadata}","page":"API","title":"InfrastructureSystems.get_count","text":"get_count(value::InfrastructureSystems.DeterministicMetadata) -> Int64\n\n\nGet DeterministicMetadata count.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_count-Tuple{InfrastructureSystems.DeterministicSingleTimeSeries}","page":"API","title":"InfrastructureSystems.get_count","text":"get_count(value::InfrastructureSystems.DeterministicSingleTimeSeries) -> Int64\n\n\nGet DeterministicSingleTimeSeries count.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_count-Tuple{InfrastructureSystems.ProbabilisticMetadata}","page":"API","title":"InfrastructureSystems.get_count","text":"get_count(value::InfrastructureSystems.ProbabilisticMetadata) -> Int64\n\n\nGet ProbabilisticMetadata count.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_count-Tuple{InfrastructureSystems.ScenariosMetadata}","page":"API","title":"InfrastructureSystems.get_count","text":"get_count(value::InfrastructureSystems.ScenariosMetadata) -> Int64\n\n\nGet ScenariosMetadata count.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_data-Tuple{InfrastructureSystems.Deterministic}","page":"API","title":"InfrastructureSystems.get_data","text":"get_data(value::InfrastructureSystems.Deterministic) -> DataStructures.SortedDict{Dates.DateTime,Array{T,1} where T,Ord} where Ord<:Base.Order.Ordering\n\n\nGet Deterministic data.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_data-Tuple{InfrastructureSystems.Probabilistic}","page":"API","title":"InfrastructureSystems.get_data","text":"get_data(value::InfrastructureSystems.Probabilistic) -> DataStructures.SortedDict{Dates.DateTime,Array,Ord} where Ord<:Base.Order.Ordering\n\n\nGet Probabilistic data.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_data-Tuple{InfrastructureSystems.Scenarios}","page":"API","title":"InfrastructureSystems.get_data","text":"get_data(value::InfrastructureSystems.Scenarios) -> DataStructures.SortedDict{Dates.DateTime,Array,Ord} where Ord<:Base.Order.Ordering\n\n\nGet Scenarios data.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_data-Tuple{InfrastructureSystems.SingleTimeSeries}","page":"API","title":"InfrastructureSystems.get_data","text":"get_data(value::InfrastructureSystems.SingleTimeSeries) -> TimeSeries.TimeArray\n\n\nGet SingleTimeSeries data.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_data_type-Tuple{InfrastructureSystems.TimeSeriesData}","page":"API","title":"InfrastructureSystems.get_data_type","text":"get_data_type(ts::InfrastructureSystems.TimeSeriesData) -> String\n\n\nReturn a String for the data type of the forecast data, this implementation avoids the use of eval on arbitrary code stored in HDF dataset.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_ext-Tuple{InfrastructureSystems.InfrastructureSystemsInternal}","page":"API","title":"InfrastructureSystems.get_ext","text":"get_ext(obj::InfrastructureSystems.InfrastructureSystemsInternal) -> Union{Nothing, Dict{String,Any}}\n\n\nReturn a user-modifiable dictionary to store extra information.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_horizon-Tuple{InfrastructureSystems.DeterministicMetadata}","page":"API","title":"InfrastructureSystems.get_horizon","text":"get_horizon(value::InfrastructureSystems.DeterministicMetadata) -> Int64\n\n\nGet DeterministicMetadata horizon.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_horizon-Tuple{InfrastructureSystems.DeterministicSingleTimeSeries}","page":"API","title":"InfrastructureSystems.get_horizon","text":"get_horizon(value::InfrastructureSystems.DeterministicSingleTimeSeries) -> Int64\n\n\nGet DeterministicSingleTimeSeries horizon.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_horizon-Tuple{InfrastructureSystems.ProbabilisticMetadata}","page":"API","title":"InfrastructureSystems.get_horizon","text":"get_horizon(value::InfrastructureSystems.ProbabilisticMetadata) -> Int64\n\n\nGet ProbabilisticMetadata horizon.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_horizon-Tuple{InfrastructureSystems.ScenariosMetadata}","page":"API","title":"InfrastructureSystems.get_horizon","text":"get_horizon(value::InfrastructureSystems.ScenariosMetadata) -> Int64\n\n\nGet ScenariosMetadata horizon.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_initial_times-Tuple{InfrastructureSystems.Forecast}","page":"API","title":"InfrastructureSystems.get_initial_times","text":"get_initial_times(f::InfrastructureSystems.Forecast) -> DataStructures.SDMKeyIteration\n\n\nReturn the initial times in the forecast.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_initial_timestamp-Tuple{InfrastructureSystems.DeterministicMetadata}","page":"API","title":"InfrastructureSystems.get_initial_timestamp","text":"get_initial_timestamp(value::InfrastructureSystems.DeterministicMetadata) -> Dates.DateTime\n\n\nGet DeterministicMetadata initial_timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_initial_timestamp-Tuple{InfrastructureSystems.DeterministicSingleTimeSeries}","page":"API","title":"InfrastructureSystems.get_initial_timestamp","text":"get_initial_timestamp(value::InfrastructureSystems.DeterministicSingleTimeSeries) -> Dates.DateTime\n\n\nGet DeterministicSingleTimeSeries initial_timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_initial_timestamp-Tuple{InfrastructureSystems.ProbabilisticMetadata}","page":"API","title":"InfrastructureSystems.get_initial_timestamp","text":"get_initial_timestamp(value::InfrastructureSystems.ProbabilisticMetadata) -> Dates.DateTime\n\n\nGet ProbabilisticMetadata initial_timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_initial_timestamp-Tuple{InfrastructureSystems.ScenariosMetadata}","page":"API","title":"InfrastructureSystems.get_initial_timestamp","text":"get_initial_timestamp(value::InfrastructureSystems.ScenariosMetadata) -> Dates.DateTime\n\n\nGet ScenariosMetadata initial_timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_initial_timestamp-Tuple{InfrastructureSystems.SingleTimeSeriesMetadata}","page":"API","title":"InfrastructureSystems.get_initial_timestamp","text":"get_initial_timestamp(value::InfrastructureSystems.SingleTimeSeriesMetadata) -> Dates.DateTime\n\n\nGet SingleTimeSeriesMetadata initial_timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_internal-Tuple{InfrastructureSystems.DeterministicMetadata}","page":"API","title":"InfrastructureSystems.get_internal","text":"get_internal(value::InfrastructureSystems.DeterministicMetadata) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet DeterministicMetadata internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_internal-Tuple{InfrastructureSystems.Deterministic}","page":"API","title":"InfrastructureSystems.get_internal","text":"get_internal(value::InfrastructureSystems.Deterministic) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Deterministic internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_internal-Tuple{InfrastructureSystems.ProbabilisticMetadata}","page":"API","title":"InfrastructureSystems.get_internal","text":"get_internal(value::InfrastructureSystems.ProbabilisticMetadata) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet ProbabilisticMetadata internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_internal-Tuple{InfrastructureSystems.Probabilistic}","page":"API","title":"InfrastructureSystems.get_internal","text":"get_internal(value::InfrastructureSystems.Probabilistic) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Probabilistic internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_internal-Tuple{InfrastructureSystems.ScenariosMetadata}","page":"API","title":"InfrastructureSystems.get_internal","text":"get_internal(value::InfrastructureSystems.ScenariosMetadata) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet ScenariosMetadata internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_internal-Tuple{InfrastructureSystems.Scenarios}","page":"API","title":"InfrastructureSystems.get_internal","text":"get_internal(value::InfrastructureSystems.Scenarios) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Scenarios internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_internal-Tuple{InfrastructureSystems.SingleTimeSeriesMetadata}","page":"API","title":"InfrastructureSystems.get_internal","text":"get_internal(value::InfrastructureSystems.SingleTimeSeriesMetadata) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet SingleTimeSeriesMetadata internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_internal-Tuple{InfrastructureSystems.SingleTimeSeries}","page":"API","title":"InfrastructureSystems.get_internal","text":"get_internal(value::InfrastructureSystems.SingleTimeSeries) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet SingleTimeSeries internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_interval-Tuple{InfrastructureSystems.DeterministicMetadata}","page":"API","title":"InfrastructureSystems.get_interval","text":"get_interval(value::InfrastructureSystems.DeterministicMetadata) -> Dates.Period\n\n\nGet DeterministicMetadata interval.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_interval-Tuple{InfrastructureSystems.DeterministicSingleTimeSeries}","page":"API","title":"InfrastructureSystems.get_interval","text":"get_interval(value::InfrastructureSystems.DeterministicSingleTimeSeries) -> Dates.Period\n\n\nGet DeterministicSingleTimeSeries interval.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_interval-Tuple{InfrastructureSystems.ProbabilisticMetadata}","page":"API","title":"InfrastructureSystems.get_interval","text":"get_interval(value::InfrastructureSystems.ProbabilisticMetadata) -> Dates.Period\n\n\nGet ProbabilisticMetadata interval.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_interval-Tuple{InfrastructureSystems.ScenariosMetadata}","page":"API","title":"InfrastructureSystems.get_interval","text":"get_interval(value::InfrastructureSystems.ScenariosMetadata) -> Dates.Period\n\n\nGet ScenariosMetadata interval.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_length-Tuple{InfrastructureSystems.SingleTimeSeriesMetadata}","page":"API","title":"InfrastructureSystems.get_length","text":"get_length(value::InfrastructureSystems.SingleTimeSeriesMetadata) -> Int64\n\n\nGet SingleTimeSeriesMetadata length.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_log_events-Tuple{InfrastructureSystems.LogEventTracker,Base.CoreLogging.LogLevel}","page":"API","title":"InfrastructureSystems.get_log_events","text":"get_log_events(tracker::InfrastructureSystems.LogEventTracker, level::Base.CoreLogging.LogLevel) -> Union{Base.ValueIterator{Dict{Symbol,InfrastructureSystems.LogEvent}}, Array{Any,1}}\n\n\nReturns an iterable of log events for a level.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_name-Tuple{InfrastructureSystems.DeterministicMetadata}","page":"API","title":"InfrastructureSystems.get_name","text":"get_name(value::InfrastructureSystems.DeterministicMetadata) -> String\n\n\nGet DeterministicMetadata name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_name-Tuple{InfrastructureSystems.Deterministic}","page":"API","title":"InfrastructureSystems.get_name","text":"get_name(value::InfrastructureSystems.Deterministic) -> String\n\n\nGet Deterministic name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_name-Tuple{InfrastructureSystems.ProbabilisticMetadata}","page":"API","title":"InfrastructureSystems.get_name","text":"get_name(value::InfrastructureSystems.ProbabilisticMetadata) -> String\n\n\nGet ProbabilisticMetadata name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_name-Tuple{InfrastructureSystems.Probabilistic}","page":"API","title":"InfrastructureSystems.get_name","text":"get_name(value::InfrastructureSystems.Probabilistic) -> String\n\n\nGet Probabilistic name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_name-Tuple{InfrastructureSystems.ScenariosMetadata}","page":"API","title":"InfrastructureSystems.get_name","text":"get_name(value::InfrastructureSystems.ScenariosMetadata) -> String\n\n\nGet ScenariosMetadata name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_name-Tuple{InfrastructureSystems.Scenarios}","page":"API","title":"InfrastructureSystems.get_name","text":"get_name(value::InfrastructureSystems.Scenarios) -> String\n\n\nGet Scenarios name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_name-Tuple{InfrastructureSystems.SingleTimeSeriesMetadata}","page":"API","title":"InfrastructureSystems.get_name","text":"get_name(value::InfrastructureSystems.SingleTimeSeriesMetadata) -> String\n\n\nGet SingleTimeSeriesMetadata name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_name-Tuple{InfrastructureSystems.SingleTimeSeries}","page":"API","title":"InfrastructureSystems.get_name","text":"get_name(value::InfrastructureSystems.SingleTimeSeries) -> String\n\n\nGet SingleTimeSeries name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_num_steps-Union{Tuple{T}, Tuple{Type{T},CSV.File,AbstractArray}} where T<:InfrastructureSystems.TimeSeriesFileFormat","page":"API","title":"InfrastructureSystems.get_num_steps","text":"get_num_steps(_::Type{T<:InfrastructureSystems.TimeSeriesFileFormat}, file::CSV.File, period::AbstractArray) -> Any\n\n\nReturn the number of steps specified by the period in the file.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_num_steps-Union{Tuple{T}, Tuple{Type{T},CSV.File,AbstractArray}} where T<:InfrastructureSystems.TimeSeriesFormatPeriodAsHeader","page":"API","title":"InfrastructureSystems.get_num_steps","text":"get_num_steps(_::Type{T<:InfrastructureSystems.TimeSeriesFormatPeriodAsHeader}, file::CSV.File, period::AbstractArray) -> Any\n\n\nReturn the number of steps specified by the period in the file.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_num_steps-Union{Tuple{T}, Tuple{Type{T},CSV.File,AbstractArray}} where T<:Union{InfrastructureSystems.TimeSeriesFormatDateTimeAsColumn, InfrastructureSystems.TimeSeriesFormatPeriodAsColumn}","page":"API","title":"InfrastructureSystems.get_num_steps","text":"get_num_steps(_::Type{T<:Union{InfrastructureSystems.TimeSeriesFormatDateTimeAsColumn, InfrastructureSystems.TimeSeriesFormatPeriodAsColumn}}, file::CSV.File, period::AbstractArray) -> Any\n\n\nReturn the number of steps specified by the period in the file.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_percentiles-Tuple{InfrastructureSystems.ProbabilisticMetadata}","page":"API","title":"InfrastructureSystems.get_percentiles","text":"get_percentiles(value::InfrastructureSystems.ProbabilisticMetadata) -> Array{Float64,1}\n\n\nGet ProbabilisticMetadata percentiles.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_percentiles-Tuple{InfrastructureSystems.Probabilistic}","page":"API","title":"InfrastructureSystems.get_percentiles","text":"get_percentiles(value::InfrastructureSystems.Probabilistic) -> Array{Float64,1}\n\n\nGet Probabilistic percentiles.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_period_columns-Tuple{Type{InfrastructureSystems.TimeSeriesFormatPeriodAsColumn},CSV.File}","page":"API","title":"InfrastructureSystems.get_period_columns","text":"get_period_columns(_::Type{InfrastructureSystems.TimeSeriesFormatPeriodAsColumn}, file::CSV.File) -> Array{Symbol,1}\n\n\nReturn the column names that specify the Period.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_resolution-Tuple{InfrastructureSystems.DeterministicMetadata}","page":"API","title":"InfrastructureSystems.get_resolution","text":"get_resolution(value::InfrastructureSystems.DeterministicMetadata) -> Dates.Period\n\n\nGet DeterministicMetadata resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_resolution-Tuple{InfrastructureSystems.Deterministic}","page":"API","title":"InfrastructureSystems.get_resolution","text":"get_resolution(value::InfrastructureSystems.Deterministic) -> Dates.Period\n\n\nGet Deterministic resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_resolution-Tuple{InfrastructureSystems.ProbabilisticMetadata}","page":"API","title":"InfrastructureSystems.get_resolution","text":"get_resolution(value::InfrastructureSystems.ProbabilisticMetadata) -> Dates.Period\n\n\nGet ProbabilisticMetadata resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_resolution-Tuple{InfrastructureSystems.Probabilistic}","page":"API","title":"InfrastructureSystems.get_resolution","text":"get_resolution(value::InfrastructureSystems.Probabilistic) -> Dates.Period\n\n\nGet Probabilistic resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_resolution-Tuple{InfrastructureSystems.ScenariosMetadata}","page":"API","title":"InfrastructureSystems.get_resolution","text":"get_resolution(value::InfrastructureSystems.ScenariosMetadata) -> Dates.Period\n\n\nGet ScenariosMetadata resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_resolution-Tuple{InfrastructureSystems.Scenarios}","page":"API","title":"InfrastructureSystems.get_resolution","text":"get_resolution(value::InfrastructureSystems.Scenarios) -> Dates.Period\n\n\nGet Scenarios resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_resolution-Tuple{InfrastructureSystems.SingleTimeSeriesMetadata}","page":"API","title":"InfrastructureSystems.get_resolution","text":"get_resolution(value::InfrastructureSystems.SingleTimeSeriesMetadata) -> Dates.Period\n\n\nGet SingleTimeSeriesMetadata resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_resolution-Tuple{TimeSeries.TimeArray}","page":"API","title":"InfrastructureSystems.get_resolution","text":"get_resolution(ts::TimeSeries.TimeArray) -> Any\n\n\nReturn the resolution from a TimeArray.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_scaling_factor_multiplier-Tuple{InfrastructureSystems.DeterministicMetadata}","page":"API","title":"InfrastructureSystems.get_scaling_factor_multiplier","text":"get_scaling_factor_multiplier(value::InfrastructureSystems.DeterministicMetadata) -> Union{Nothing, Function}\n\n\nGet DeterministicMetadata scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_scaling_factor_multiplier-Tuple{InfrastructureSystems.Deterministic}","page":"API","title":"InfrastructureSystems.get_scaling_factor_multiplier","text":"get_scaling_factor_multiplier(value::InfrastructureSystems.Deterministic) -> Union{Nothing, Function}\n\n\nGet Deterministic scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_scaling_factor_multiplier-Tuple{InfrastructureSystems.ProbabilisticMetadata}","page":"API","title":"InfrastructureSystems.get_scaling_factor_multiplier","text":"get_scaling_factor_multiplier(value::InfrastructureSystems.ProbabilisticMetadata) -> Union{Nothing, Function}\n\n\nGet ProbabilisticMetadata scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_scaling_factor_multiplier-Tuple{InfrastructureSystems.Probabilistic}","page":"API","title":"InfrastructureSystems.get_scaling_factor_multiplier","text":"get_scaling_factor_multiplier(value::InfrastructureSystems.Probabilistic) -> Union{Nothing, Function}\n\n\nGet Probabilistic scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_scaling_factor_multiplier-Tuple{InfrastructureSystems.ScenariosMetadata}","page":"API","title":"InfrastructureSystems.get_scaling_factor_multiplier","text":"get_scaling_factor_multiplier(value::InfrastructureSystems.ScenariosMetadata) -> Union{Nothing, Function}\n\n\nGet ScenariosMetadata scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_scaling_factor_multiplier-Tuple{InfrastructureSystems.Scenarios}","page":"API","title":"InfrastructureSystems.get_scaling_factor_multiplier","text":"get_scaling_factor_multiplier(value::InfrastructureSystems.Scenarios) -> Union{Nothing, Function}\n\n\nGet Scenarios scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_scaling_factor_multiplier-Tuple{InfrastructureSystems.SingleTimeSeriesMetadata}","page":"API","title":"InfrastructureSystems.get_scaling_factor_multiplier","text":"get_scaling_factor_multiplier(value::InfrastructureSystems.SingleTimeSeriesMetadata) -> Union{Nothing, Function}\n\n\nGet SingleTimeSeriesMetadata scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_scaling_factor_multiplier-Tuple{InfrastructureSystems.SingleTimeSeries}","page":"API","title":"InfrastructureSystems.get_scaling_factor_multiplier","text":"get_scaling_factor_multiplier(value::InfrastructureSystems.SingleTimeSeries) -> Union{Nothing, Function}\n\n\nGet SingleTimeSeries scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_scenario_count-Tuple{InfrastructureSystems.ScenariosMetadata}","page":"API","title":"InfrastructureSystems.get_scenario_count","text":"get_scenario_count(value::InfrastructureSystems.ScenariosMetadata) -> Int64\n\n\nGet ScenariosMetadata scenario_count.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_scenario_count-Tuple{InfrastructureSystems.Scenarios}","page":"API","title":"InfrastructureSystems.get_scenario_count","text":"get_scenario_count(value::InfrastructureSystems.Scenarios) -> Int64\n\n\nGet Scenarios scenario_count.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_serialization_metadata-Tuple{Dict}","page":"API","title":"InfrastructureSystems.get_serialization_metadata","text":"get_serialization_metadata(data::Dict) -> Any\n\n\nReturn the type information for the serialized struct.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_single_time_series-Tuple{InfrastructureSystems.DeterministicSingleTimeSeries}","page":"API","title":"InfrastructureSystems.get_single_time_series","text":"get_single_time_series(value::InfrastructureSystems.DeterministicSingleTimeSeries) -> InfrastructureSystems.SingleTimeSeries\n\n\nGet DeterministicSingleTimeSeries single_time_series.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series-Union{Tuple{T}, Tuple{Type{T},InfrastructureSystems.InfrastructureSystemsComponent,AbstractString}} where T<:InfrastructureSystems.TimeSeriesData","page":"API","title":"InfrastructureSystems.get_time_series","text":"Return a time series corresponding to the given parameters.\n\nArguments\n\n::Type{T}: Concrete subtype of TimeSeriesData to return\ncomponent::InfrastructureSystemsComponent: Component containing the time series\nname::AbstractString: name of time series\nstart_time::Union{Nothing, Dates.DateTime} = nothing: If nothing, use the initial_timestamp of the time series. If T is a subtype of Forecast then start_time must be the first timstamp of a window.\nlen::Union{Nothing, Int} = nothing: Length in the time dimension. If nothing, use the entire length.\ncount::Union{Nothing, Int} = nothing: Only applicable to subtypes of Forecast. Number of forecast windows starting at start_time to return. Defaults to all available.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_array","page":"API","title":"InfrastructureSystems.get_time_series_array","text":"get_time_series_array(component::InfrastructureSystems.InfrastructureSystemsComponent, time_series::InfrastructureSystems.StaticTimeSeries) -> Any\nget_time_series_array(component::InfrastructureSystems.InfrastructureSystemsComponent, time_series::InfrastructureSystems.StaticTimeSeries, start_time::Union{Nothing, Dates.DateTime}; len, ignore_scaling_factors) -> Any\n\n\nReturn a TimeSeries.TimeArray from a cached StaticTimeSeries instance.\n\nIf the data are scaling factors then the stored scalingfactormultiplier will be called on the component and applied to the data unless ignorescalingfactors is true.\n\n\n\n\n\n","category":"function"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_array-Tuple{InfrastructureSystems.InfrastructureSystemsComponent,InfrastructureSystems.Forecast,Dates.DateTime}","page":"API","title":"InfrastructureSystems.get_time_series_array","text":"get_time_series_array(component::InfrastructureSystems.InfrastructureSystemsComponent, forecast::InfrastructureSystems.Forecast, start_time::Dates.DateTime; len, ignore_scaling_factors) -> Any\n\n\nReturn a TimeSeries.TimeArray for one forecast window from a cached Forecast instance.\n\nIf the data are scaling factors then the stored scalingfactormultiplier will be called on the component and applied to the data unless ignorescalingfactors is true.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_array-Union{Tuple{T}, Tuple{Type{T},InfrastructureSystems.InfrastructureSystemsComponent,AbstractString}} where T<:InfrastructureSystems.TimeSeriesData","page":"API","title":"InfrastructureSystems.get_time_series_array","text":"Return a TimeSeries.TimeArray from storage for the given time series parameters.\n\nIf the data are scaling factors then the stored scalingfactormultiplier will be called on the component and applied to the data unless ignorescalingfactors is true.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_container-Tuple{InfrastructureSystems.InfrastructureSystemsComponent}","page":"API","title":"InfrastructureSystems.get_time_series_container","text":"get_time_series_container(value::InfrastructureSystems.InfrastructureSystemsComponent) -> InfrastructureSystems.TimeSeriesContainer\n\n\nReturn the internal time_series storage container or nothing, if the type doesn't store time series.\n\nSubtypes need to implement this method if they store time series.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_counts-Tuple{InfrastructureSystems.SystemData}","page":"API","title":"InfrastructureSystems.get_time_series_counts","text":"get_time_series_counts(data::InfrastructureSystems.SystemData) -> Tuple{Int64,Any,Any}\n\n\nReturn a tuple of counts of components with time series and total time series and forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_format-Tuple{CSV.File}","page":"API","title":"InfrastructureSystems.get_time_series_format","text":"get_time_series_format(file::CSV.File) -> Type\n\n\nReturn the time series format used in the CSV file.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_multiple","page":"API","title":"InfrastructureSystems.get_time_series_multiple","text":"get_time_series_multiple(data::InfrastructureSystems.SystemData) -> Channel{Any}\nget_time_series_multiple(data::InfrastructureSystems.SystemData, filter_func::Any; type, name) -> Channel{Any}\n\n\nReturns an iterator of TimeSeriesData instances attached to the system.\n\nNote that passing a filter function can be much slower than the other filtering parameters because it reads time series data from media.\n\nCall collect on the result to get an array.\n\nArguments\n\ndata::SystemData: system\nfilter_func = nothing: Only return time_series for which this returns true.\ntype = nothing: Only return time_series with this type.\nname = nothing: Only return time_series matching this value.\n\n\n\n\n\n","category":"function"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_multiple-2","page":"API","title":"InfrastructureSystems.get_time_series_multiple","text":"get_time_series_multiple(component::InfrastructureSystems.InfrastructureSystemsComponent) -> Channel{Any}\nget_time_series_multiple(component::InfrastructureSystems.InfrastructureSystemsComponent, filter_func::Any; type, start_time, name) -> Channel{Any}\n\n\nReturns an iterator of TimeSeriesData instances attached to the component.\n\nNote that passing a filter function can be much slower than the other filtering parameters because it reads time series data from media.\n\nCall collect on the result to get an array.\n\nArguments\n\ncomponent::InfrastructureSystemsComponent: component from which to get time_series\nfilter_func = nothing: Only return time_series for which this returns true.\ntype = nothing: Only return time_series with this type.\nname = nothing: Only return time_series matching this value.\n\n\n\n\n\n","category":"function"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_multiple-Tuple{Type{InfrastructureSystems.TimeSeriesMetadata},InfrastructureSystems.InfrastructureSystemsComponent}","page":"API","title":"InfrastructureSystems.get_time_series_multiple","text":"get_time_series_multiple(_::Type{InfrastructureSystems.TimeSeriesMetadata}, component::InfrastructureSystems.InfrastructureSystemsComponent) -> Channel{Any}\n\n\nReturns an iterator of TimeSeriesMetadata instances attached to the component.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_timestamps","page":"API","title":"InfrastructureSystems.get_time_series_timestamps","text":"get_time_series_timestamps(component::InfrastructureSystems.InfrastructureSystemsComponent, time_series::InfrastructureSystems.StaticTimeSeries) -> Array{D,1} where D<:Dates.TimeType\nget_time_series_timestamps(component::InfrastructureSystems.InfrastructureSystemsComponent, time_series::InfrastructureSystems.StaticTimeSeries, start_time::Union{Nothing, Dates.DateTime}; len) -> Array{D,1} where D<:Dates.TimeType\n\n\nReturn a vector of timestamps from a cached StaticTimeSeries instance.\n\n\n\n\n\n","category":"function"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_timestamps-Tuple{InfrastructureSystems.InfrastructureSystemsComponent,InfrastructureSystems.Forecast,Dates.DateTime}","page":"API","title":"InfrastructureSystems.get_time_series_timestamps","text":"get_time_series_timestamps(component::InfrastructureSystems.InfrastructureSystemsComponent, forecast::InfrastructureSystems.Forecast, start_time::Dates.DateTime; len) -> Array{D,1} where D<:Dates.TimeType\n\n\nReturn a vector of timestamps from a cached Forecast instance.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_timestamps-Union{Tuple{T}, Tuple{Type{T},InfrastructureSystems.InfrastructureSystemsComponent,AbstractString}} where T<:InfrastructureSystems.TimeSeriesData","page":"API","title":"InfrastructureSystems.get_time_series_timestamps","text":"Return a vector of timestamps from storage for the given time series parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_uuid-Tuple{InfrastructureSystems.DeterministicMetadata}","page":"API","title":"InfrastructureSystems.get_time_series_uuid","text":"get_time_series_uuid(value::InfrastructureSystems.DeterministicMetadata) -> Base.UUID\n\n\nGet DeterministicMetadata time_series_uuid.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_uuid-Tuple{InfrastructureSystems.ProbabilisticMetadata}","page":"API","title":"InfrastructureSystems.get_time_series_uuid","text":"get_time_series_uuid(value::InfrastructureSystems.ProbabilisticMetadata) -> Base.UUID\n\n\nGet ProbabilisticMetadata time_series_uuid.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_uuid-Tuple{InfrastructureSystems.ScenariosMetadata}","page":"API","title":"InfrastructureSystems.get_time_series_uuid","text":"get_time_series_uuid(value::InfrastructureSystems.ScenariosMetadata) -> Base.UUID\n\n\nGet ScenariosMetadata time_series_uuid.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_uuid-Tuple{InfrastructureSystems.SingleTimeSeriesMetadata}","page":"API","title":"InfrastructureSystems.get_time_series_uuid","text":"get_time_series_uuid(value::InfrastructureSystems.SingleTimeSeriesMetadata) -> Base.UUID\n\n\nGet SingleTimeSeriesMetadata time_series_uuid.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_values","page":"API","title":"InfrastructureSystems.get_time_series_values","text":"get_time_series_values(component::InfrastructureSystems.InfrastructureSystemsComponent, time_series::InfrastructureSystems.StaticTimeSeries) -> Any\nget_time_series_values(component::InfrastructureSystems.InfrastructureSystemsComponent, time_series::InfrastructureSystems.StaticTimeSeries, start_time::Union{Nothing, Dates.DateTime}; len, ignore_scaling_factors) -> Any\n\n\nReturn an Array of values from a cached StaticTimeSeries instance for the requested time series parameters.\n\n\n\n\n\n","category":"function"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_values-Union{Tuple{T}, Tuple{InfrastructureSystems.InfrastructureSystemsComponent,InfrastructureSystems.Forecast,Dates.DateTime}} where T<:InfrastructureSystems.TimeSeriesData","page":"API","title":"InfrastructureSystems.get_time_series_values","text":"get_time_series_values(component::InfrastructureSystems.InfrastructureSystemsComponent, forecast::InfrastructureSystems.Forecast, start_time::Dates.DateTime; len, ignore_scaling_factors) -> Any\n\n\nReturn an Array of values for one forecast window from a cached Forecast instance.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_time_series_values-Union{Tuple{T}, Tuple{Type{T},InfrastructureSystems.InfrastructureSystemsComponent,AbstractString}} where T<:InfrastructureSystems.TimeSeriesData","page":"API","title":"InfrastructureSystems.get_time_series_values","text":"get_time_series_values(::Type{T<:InfrastructureSystems.TimeSeriesData}, component::InfrastructureSystems.InfrastructureSystemsComponent, name::AbstractString; start_time, len, ignore_scaling_factors) -> Any\n\n\nReturn an Array of values from storage for the requested time series parameters.\n\nIf the data size is small and this will be called many times, consider using the version that accepts a cached TimeSeriesData instance.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_timestamp-Tuple{Type{InfrastructureSystems.TimeSeriesFormatYMDPeriodAsColumn},CSV.File,Int64}","page":"API","title":"InfrastructureSystems.get_timestamp","text":"get_timestamp(_::Type{InfrastructureSystems.TimeSeriesFormatYMDPeriodAsColumn}, file::CSV.File, row_index::Int64) -> Any\n\n\nReturn a Dates.DateTime for the row in the CSV file.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_total_period-Tuple{InfrastructureSystems.Forecast}","page":"API","title":"InfrastructureSystems.get_total_period","text":"get_total_period(f::InfrastructureSystems.Forecast) -> Any\n\n\nReturn the total period covered by the forecast.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_unique_timestamps-Union{Tuple{T}, Tuple{Type{T},CSV.File}} where T<:InfrastructureSystems.TimeSeriesFileFormat","page":"API","title":"InfrastructureSystems.get_unique_timestamps","text":"get_unique_timestamps(_::Type{T<:InfrastructureSystems.TimeSeriesFileFormat}, file::CSV.File) -> Array{Dict{String,Any},1}\n\n\nReturn a vector of dicts of unique timestamps and their counts.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_uuid-Tuple{InfrastructureSystems.InfrastructureSystemsType}","page":"API","title":"InfrastructureSystems.get_uuid","text":"get_uuid(obj::InfrastructureSystems.InfrastructureSystemsType) -> Base.UUID\n\n\nGets the UUID for any InfrastructureSystemsType.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_value_columns-Tuple{Type{InfrastructureSystems.TimeSeriesFormatComponentsAsColumnsNoTime},CSV.File}","page":"API","title":"InfrastructureSystems.get_value_columns","text":"get_value_columns(_::Type{InfrastructureSystems.TimeSeriesFormatComponentsAsColumnsNoTime}, file::CSV.File) -> Array{Symbol,1}\n\n\nReturn the column names with values.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_value_columns-Tuple{Type{InfrastructureSystems.TimeSeriesFormatYMDPeriodAsColumn},CSV.File}","page":"API","title":"InfrastructureSystems.get_value_columns","text":"get_value_columns(_::Type{InfrastructureSystems.TimeSeriesFormatYMDPeriodAsColumn}, file::CSV.File) -> Array{Symbol,1}\n\n\nReturn the column names with values (components).\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.get_window-Tuple{InfrastructureSystems.Forecast,Int64}","page":"API","title":"InfrastructureSystems.get_window","text":"get_window(forecast::InfrastructureSystems.Forecast, index::Int64; len) -> Any\n\n\nReturn the forecast window corresponsing to interval index.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.head-Tuple{InfrastructureSystems.SingleTimeSeries}","page":"API","title":"InfrastructureSystems.head","text":"head(time_series::InfrastructureSystems.SingleTimeSeries) -> Any\n\n\nReturn a time_series with only the first num values.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.increment_count-Tuple{InfrastructureSystems.LogEventTracker,InfrastructureSystems.LogEvent,Bool}","page":"API","title":"InfrastructureSystems.increment_count","text":"increment_count(tracker::InfrastructureSystems.LogEventTracker, event::InfrastructureSystems.LogEvent, suppressed::Bool) -> Union{Nothing, Int64, InfrastructureSystems.LogEvent}\n\n\nIncrements the count of a log event.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.index_to_initial_time-Tuple{InfrastructureSystems.Forecast,Int64}","page":"API","title":"InfrastructureSystems.index_to_initial_time","text":"index_to_initial_time(forecast::InfrastructureSystems.Forecast, index::Int64) -> Any\n\n\nReturn the Dates.DateTime corresponding to an interval index.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.iterate_components-Tuple{InfrastructureSystems.Components}","page":"API","title":"InfrastructureSystems.iterate_components","text":"iterate_components(components::InfrastructureSystems.Components) -> Channel{Any}\n\n\nIterates over all components.\n\nExamples\n\nfor component in iterate_components(obj)\n    @show component\nend\n\nSee also: get_components\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.list_recorder_events-Union{Tuple{T}, Tuple{Type{T},AbstractString}, Tuple{Type{T},AbstractString,Union{Nothing, Function}}} where T<:InfrastructureSystems.AbstractRecorderEvent","page":"API","title":"InfrastructureSystems.list_recorder_events","text":"list_recorder_events(::Type{T<:InfrastructureSystems.AbstractRecorderEvent}, filename::AbstractString) -> Array{_A,1} where _A\nlist_recorder_events(::Type{T<:InfrastructureSystems.AbstractRecorderEvent}, filename::AbstractString, filter_func::Union{Nothing, Function}) -> Array{_A,1} where _A\n\n\nReturn the events of type T in filename.\n\nArguments\n\nT: event type\nfilename::AbstractString: filename containing recorder events\nfilter_func::Union{Nothing, Function} = nothing: Optional function that accepts an event  of type T and returns a Bool. Apply this function to each event and only return events  where the result is true.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.make_time_array-Tuple{InfrastructureSystems.Forecast,Dates.DateTime}","page":"API","title":"InfrastructureSystems.make_time_array","text":"make_time_array(forecast::InfrastructureSystems.Forecast, start_time::Dates.DateTime; len) -> Any\n\n\nReturn a TimeSeries.TimeArray for one forecast window.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.make_time_series!-Tuple{InfrastructureSystems.TimeSeriesCache,InfrastructureSystems.TimeSeriesFileMetadata}","page":"API","title":"InfrastructureSystems.make_time_series!","text":"make_time_series!(cache::InfrastructureSystems.TimeSeriesCache, ts_file_metadata::InfrastructureSystems.TimeSeriesFileMetadata) -> Any\n\n\nReturn a time series from TimeSeriesFileMetadata.\n\nArguments\n\ncache::TimeSeriesCache: cached data\nts_file_metadata::TimeSeriesFileMetadata: metadata\nresolution::{Nothing, Dates.Period}: skip any time_series that don't match this resolution\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.open_file_logger","page":"API","title":"InfrastructureSystems.open_file_logger","text":"open_file_logger(func::Function, filename::String) -> Any\nopen_file_logger(func::Function, filename::String, level::Any) -> Any\nopen_file_logger(func::Function, filename::String, level::Any, mode::Any) -> Any\n\n\nOpens a file logger using Logging.SimpleLogger.\n\nExample\n\nopen_file_logger(\"log.txt\", Logging.Info) do logger\n    global_logger(logger)\n    @info \"hello world\"\nend\n\n\n\n\n\n","category":"function"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.prepare_for_removal!-Tuple{InfrastructureSystems.InfrastructureSystemsComponent}","page":"API","title":"InfrastructureSystems.prepare_for_removal!","text":"prepare_for_removal!(component::InfrastructureSystems.InfrastructureSystemsComponent)\n\n\nThis function must be called when a component is removed from a system.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.prepare_for_serialization!-Tuple{InfrastructureSystems.SystemData,AbstractString}","page":"API","title":"InfrastructureSystems.prepare_for_serialization!","text":"prepare_for_serialization!(data::InfrastructureSystems.SystemData, filename::AbstractString; force) -> String\n\n\nParent object should call this prior to serialization so that SystemData can store the appropriate path information for the time series data.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.read_time_series-Union{Tuple{T}, Tuple{Type{T},AbstractString}, Tuple{Type{T},AbstractString,Any}} where T<:InfrastructureSystems.TimeSeriesData","page":"API","title":"InfrastructureSystems.read_time_series","text":"read_time_series(::Type{T<:InfrastructureSystems.TimeSeriesData}, data_file::AbstractString) -> InfrastructureSystems.RawTimeSeries\nread_time_series(::Type{T<:InfrastructureSystems.TimeSeriesData}, data_file::AbstractString, component_name::Any; kwargs...) -> InfrastructureSystems.RawTimeSeries\n\n\nReturn a TimeArray from a CSV file.\n\nPass component_name when the file does not have the component name in a column header.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.read_time_series-Union{Tuple{T}, Tuple{Type{T},Type{#s23} where #s23<:InfrastructureSystems.StaticTimeSeries,CSV.File}, Tuple{Type{T},Type{#s22} where #s22<:InfrastructureSystems.StaticTimeSeries,CSV.File,Any}} where T<:InfrastructureSystems.TimeSeriesFormatComponentsAsColumnsNoTime","page":"API","title":"InfrastructureSystems.read_time_series","text":"read_time_series(::Type{T<:InfrastructureSystems.TimeSeriesFormatComponentsAsColumnsNoTime}, ::Type{#s23} where #s23<:InfrastructureSystems.StaticTimeSeries, file::CSV.File) -> InfrastructureSystems.RawTimeSeries\nread_time_series(::Type{T<:InfrastructureSystems.TimeSeriesFormatComponentsAsColumnsNoTime}, ::Type{#s22} where #s22<:InfrastructureSystems.StaticTimeSeries, file::CSV.File, component_name::Any; kwargs...) -> InfrastructureSystems.RawTimeSeries\n\n\nThis version of the function only has component_name to match the interface. It is unused.\n\nSet start_datetime as a keyword argument for the starting timestamp, otherwise the current day is used.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.read_time_series-Union{Tuple{T}, Tuple{Type{T},Type{#s23} where #s23<:InfrastructureSystems.StaticTimeSeries,CSV.File}, Tuple{Type{T},Type{#s22} where #s22<:InfrastructureSystems.StaticTimeSeries,CSV.File,Any}} where T<:Union{InfrastructureSystems.TimeSeriesFormatDateTimeAsColumn, InfrastructureSystems.TimeSeriesFormatPeriodAsColumn}","page":"API","title":"InfrastructureSystems.read_time_series","text":"read_time_series(::Type{T<:Union{InfrastructureSystems.TimeSeriesFormatDateTimeAsColumn, InfrastructureSystems.TimeSeriesFormatPeriodAsColumn}}, ::Type{#s23} where #s23<:InfrastructureSystems.StaticTimeSeries, file::CSV.File) -> InfrastructureSystems.RawTimeSeries\nread_time_series(::Type{T<:Union{InfrastructureSystems.TimeSeriesFormatDateTimeAsColumn, InfrastructureSystems.TimeSeriesFormatPeriodAsColumn}}, ::Type{#s22} where #s22<:InfrastructureSystems.StaticTimeSeries, file::CSV.File, component_name::Any; kwargs...) -> InfrastructureSystems.RawTimeSeries\n\n\nReturn a TimeSeries.TimeArray representing the CSV file.\n\nThis version of the function only has component_name to match the interface. It is unused.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.read_time_series-Union{Tuple{T}, Tuple{Type{T},Type{#s91} where #s91<:InfrastructureSystems.StaticTimeSeries,CSV.File,AbstractString}} where T<:InfrastructureSystems.TimeSeriesFormatPeriodAsHeader","page":"API","title":"InfrastructureSystems.read_time_series","text":"read_time_series(::Type{T<:InfrastructureSystems.TimeSeriesFormatPeriodAsHeader}, ::Type{#s91} where #s91<:InfrastructureSystems.StaticTimeSeries, file::CSV.File, component_name::AbstractString; kwargs...) -> InfrastructureSystems.RawTimeSeries\n\n\nThis version of the function supports the format where there is no column header for a component, so the component_name must be passed in.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.read_time_series-Union{Tuple{T}, Tuple{Type{T},Type{InfrastructureSystems.Deterministic},CSV.File}, Tuple{Type{T},Type{InfrastructureSystems.Deterministic},CSV.File,Any}} where T<:InfrastructureSystems.TimeSeriesFormatDateTimeAsColumn","page":"API","title":"InfrastructureSystems.read_time_series","text":"read_time_series(::Type{T<:InfrastructureSystems.TimeSeriesFormatDateTimeAsColumn}, ::Type{InfrastructureSystems.Deterministic}, file::CSV.File) -> InfrastructureSystems.RawTimeSeries\nread_time_series(::Type{T<:InfrastructureSystems.TimeSeriesFormatDateTimeAsColumn}, ::Type{InfrastructureSystems.Deterministic}, file::CSV.File, component_name::Any; kwargs...) -> InfrastructureSystems.RawTimeSeries\n\n\nReturn a RawTimeSeries from a CSV file.\n\nPass component_name when the file does not have the component name in a column header.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.read_time_series_file_metadata-Tuple{AbstractString}","page":"API","title":"InfrastructureSystems.read_time_series_file_metadata","text":"read_time_series_file_metadata(file_path::AbstractString) -> Any\n\n\nReads time_series metadata and fixes relative paths to the data files.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.redirect_stdout_to_log-Tuple{Function}","page":"API","title":"InfrastructureSystems.redirect_stdout_to_log","text":"redirect_stdout_to_log(func::Function) -> Any\n\n\nRedirect all data written to stdout by a function to log events.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.register_recorder!-Tuple{Symbol}","page":"API","title":"InfrastructureSystems.register_recorder!","text":"register_recorder!(name::Symbol; io, mode, directory)\n\n\nRegister a recorder to log events. Afterwards, calls to @record name <event-type>() will record the event as JSON in <name>.log.\n\nCallers should guarantee that unregister_recorder! is called to close the file handle.\n\nArguments\n\nname::Symbol: name of recorder\nio::Union{Nothing, IO}:  If nothing, record events in a file using name.\nmode = \"w\":  Only used when io is nothing.\ndirectory = \".\":  Only used when io is nothing.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.remove_component!-Union{Tuple{T}, Tuple{InfrastructureSystems.Components,T}} where T<:InfrastructureSystems.InfrastructureSystemsComponent","page":"API","title":"InfrastructureSystems.remove_component!","text":"remove_component!(components::InfrastructureSystems.Components, component::T<:InfrastructureSystems.InfrastructureSystemsComponent) -> InfrastructureSystems.InfrastructureSystemsComponent\n\n\nRemove a component by its value.\n\nThrows ArgumentError if the component is not stored.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.remove_component!-Union{Tuple{T}, Tuple{Type{T},InfrastructureSystems.Components,AbstractString}} where T<:InfrastructureSystems.InfrastructureSystemsComponent","page":"API","title":"InfrastructureSystems.remove_component!","text":"Remove a component by its name.\n\nThrows ArgumentError if the component is not stored.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.remove_components!-Union{Tuple{T}, Tuple{Type{T},InfrastructureSystems.Components}} where T<:InfrastructureSystems.InfrastructureSystemsComponent","page":"API","title":"InfrastructureSystems.remove_components!","text":"remove_components!(_::Type{T<:InfrastructureSystems.InfrastructureSystemsComponent}, components::InfrastructureSystems.Components) -> Base.ValueIterator\n\n\nRemove all components of type T.\n\nThrows ArgumentError if the type is not stored.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.remove_time_series!-Union{Tuple{T}, Tuple{Type{T},InfrastructureSystems.SystemData,InfrastructureSystems.InfrastructureSystemsComponent,String}} where T<:InfrastructureSystems.TimeSeriesData","page":"API","title":"InfrastructureSystems.remove_time_series!","text":"remove_time_series!(_::Type{T<:InfrastructureSystems.TimeSeriesData}, data::InfrastructureSystems.SystemData, component::InfrastructureSystems.InfrastructureSystemsComponent, name::String) -> Union{Nothing, Int32, InfrastructureSystems._TimeSeriesRecord}\n\n\nRemove the time series data for a component.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.remove_time_series_metadata!-Union{Tuple{T}, Tuple{Type{T},InfrastructureSystems.InfrastructureSystemsComponent,AbstractString}} where T<:InfrastructureSystems.TimeSeriesMetadata","page":"API","title":"InfrastructureSystems.remove_time_series_metadata!","text":"remove_time_series_metadata!(_::Type{T<:InfrastructureSystems.TimeSeriesMetadata}, component::InfrastructureSystems.InfrastructureSystemsComponent, name::AbstractString) -> Bool\n\n\nRemoves the metadata for a time_series. If this returns true then the caller must also remove the actual time series data.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.replace_iterator-Tuple{InfrastructureSystems.LazyDictFromIterator,Any}","page":"API","title":"InfrastructureSystems.replace_iterator","text":"replace_iterator(container::InfrastructureSystems.LazyDictFromIterator, iter::Any) -> Any\n\n\nReplace the iterator, maintaining the cached dict.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.report_log_summary-Tuple{InfrastructureSystems.LogEventTracker}","page":"API","title":"InfrastructureSystems.report_log_summary","text":"report_log_summary(tracker::InfrastructureSystems.LogEventTracker) -> String\n\n\nReturns a summary of log event counts by level.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.report_log_summary-Tuple{InfrastructureSystems.MultiLogger}","page":"API","title":"InfrastructureSystems.report_log_summary","text":"report_log_summary(logger::InfrastructureSystems.MultiLogger) -> String\n\n\nReturns a summary of log event counts by level.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.reset_iterator-Tuple{InfrastructureSystems.LazyDictFromIterator}","page":"API","title":"InfrastructureSystems.reset_iterator","text":"reset_iterator(container::InfrastructureSystems.LazyDictFromIterator)\n\n\nReset the iterator for cases where underlying arrays have changed.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.serialize-Union{Tuple{T}, Tuple{T}} where T<:InfrastructureSystems.InfrastructureSystemsType","page":"API","title":"InfrastructureSystems.serialize","text":"Serialize the Julia value into standard types that can be converted to non-Julia formats, such as JSON. In cases where val is an instance of a struct, return a Dict. In cases where val is a scalar value, return that value.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_component!-Tuple{InfrastructureSystems.TimeSeriesFileMetadata,InfrastructureSystems.SystemData,Module}","page":"API","title":"InfrastructureSystems.set_component!","text":"set_component!(metadata::InfrastructureSystems.TimeSeriesFileMetadata, data::InfrastructureSystems.SystemData, mod::Module) -> Any\n\n\nSet the component value in metadata by looking up the category in module. This requires that category be a string version of a component's abstract type. Modules can override for custom behavior.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_count!-Tuple{InfrastructureSystems.DeterministicMetadata,Any}","page":"API","title":"InfrastructureSystems.set_count!","text":"set_count!(value::InfrastructureSystems.DeterministicMetadata, val::Any) -> Any\n\n\nSet DeterministicMetadata count.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_count!-Tuple{InfrastructureSystems.DeterministicSingleTimeSeries,Any}","page":"API","title":"InfrastructureSystems.set_count!","text":"set_count!(value::InfrastructureSystems.DeterministicSingleTimeSeries, val::Any) -> Any\n\n\nSet DeterministicSingleTimeSeries count.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_count!-Tuple{InfrastructureSystems.ProbabilisticMetadata,Any}","page":"API","title":"InfrastructureSystems.set_count!","text":"set_count!(value::InfrastructureSystems.ProbabilisticMetadata, val::Any) -> Any\n\n\nSet ProbabilisticMetadata count.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_count!-Tuple{InfrastructureSystems.ScenariosMetadata,Any}","page":"API","title":"InfrastructureSystems.set_count!","text":"set_count!(value::InfrastructureSystems.ScenariosMetadata, val::Any) -> Any\n\n\nSet ScenariosMetadata count.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_data!-Tuple{InfrastructureSystems.Deterministic,Any}","page":"API","title":"InfrastructureSystems.set_data!","text":"set_data!(value::InfrastructureSystems.Deterministic, val::Any) -> Any\n\n\nSet Deterministic data.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_data!-Tuple{InfrastructureSystems.Probabilistic,Any}","page":"API","title":"InfrastructureSystems.set_data!","text":"set_data!(value::InfrastructureSystems.Probabilistic, val::Any) -> Any\n\n\nSet Probabilistic data.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_data!-Tuple{InfrastructureSystems.Scenarios,Any}","page":"API","title":"InfrastructureSystems.set_data!","text":"set_data!(value::InfrastructureSystems.Scenarios, val::Any) -> Any\n\n\nSet Scenarios data.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_data!-Tuple{InfrastructureSystems.SingleTimeSeries,Any}","page":"API","title":"InfrastructureSystems.set_data!","text":"set_data!(value::InfrastructureSystems.SingleTimeSeries, val::Any) -> Any\n\n\nSet SingleTimeSeries data.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_horizon!-Tuple{InfrastructureSystems.DeterministicMetadata,Any}","page":"API","title":"InfrastructureSystems.set_horizon!","text":"set_horizon!(value::InfrastructureSystems.DeterministicMetadata, val::Any) -> Any\n\n\nSet DeterministicMetadata horizon.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_horizon!-Tuple{InfrastructureSystems.DeterministicSingleTimeSeries,Any}","page":"API","title":"InfrastructureSystems.set_horizon!","text":"set_horizon!(value::InfrastructureSystems.DeterministicSingleTimeSeries, val::Any) -> Any\n\n\nSet DeterministicSingleTimeSeries horizon.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_horizon!-Tuple{InfrastructureSystems.ProbabilisticMetadata,Any}","page":"API","title":"InfrastructureSystems.set_horizon!","text":"set_horizon!(value::InfrastructureSystems.ProbabilisticMetadata, val::Any) -> Any\n\n\nSet ProbabilisticMetadata horizon.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_horizon!-Tuple{InfrastructureSystems.ScenariosMetadata,Any}","page":"API","title":"InfrastructureSystems.set_horizon!","text":"set_horizon!(value::InfrastructureSystems.ScenariosMetadata, val::Any) -> Any\n\n\nSet ScenariosMetadata horizon.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_initial_timestamp!-Tuple{InfrastructureSystems.DeterministicMetadata,Any}","page":"API","title":"InfrastructureSystems.set_initial_timestamp!","text":"set_initial_timestamp!(value::InfrastructureSystems.DeterministicMetadata, val::Any) -> Any\n\n\nSet DeterministicMetadata initial_timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_initial_timestamp!-Tuple{InfrastructureSystems.DeterministicSingleTimeSeries,Any}","page":"API","title":"InfrastructureSystems.set_initial_timestamp!","text":"set_initial_timestamp!(value::InfrastructureSystems.DeterministicSingleTimeSeries, val::Any) -> Any\n\n\nSet DeterministicSingleTimeSeries initial_timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_initial_timestamp!-Tuple{InfrastructureSystems.ProbabilisticMetadata,Any}","page":"API","title":"InfrastructureSystems.set_initial_timestamp!","text":"set_initial_timestamp!(value::InfrastructureSystems.ProbabilisticMetadata, val::Any) -> Any\n\n\nSet ProbabilisticMetadata initial_timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_initial_timestamp!-Tuple{InfrastructureSystems.ScenariosMetadata,Any}","page":"API","title":"InfrastructureSystems.set_initial_timestamp!","text":"set_initial_timestamp!(value::InfrastructureSystems.ScenariosMetadata, val::Any) -> Any\n\n\nSet ScenariosMetadata initial_timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_initial_timestamp!-Tuple{InfrastructureSystems.SingleTimeSeriesMetadata,Any}","page":"API","title":"InfrastructureSystems.set_initial_timestamp!","text":"set_initial_timestamp!(value::InfrastructureSystems.SingleTimeSeriesMetadata, val::Any) -> Any\n\n\nSet SingleTimeSeriesMetadata initial_timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_internal!-Tuple{InfrastructureSystems.Deterministic,Any}","page":"API","title":"InfrastructureSystems.set_internal!","text":"set_internal!(value::InfrastructureSystems.Deterministic, val::Any) -> Any\n\n\nSet Deterministic internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_internal!-Tuple{InfrastructureSystems.DeterministicMetadata,Any}","page":"API","title":"InfrastructureSystems.set_internal!","text":"set_internal!(value::InfrastructureSystems.DeterministicMetadata, val::Any) -> Any\n\n\nSet DeterministicMetadata internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_internal!-Tuple{InfrastructureSystems.Probabilistic,Any}","page":"API","title":"InfrastructureSystems.set_internal!","text":"set_internal!(value::InfrastructureSystems.Probabilistic, val::Any) -> Any\n\n\nSet Probabilistic internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_internal!-Tuple{InfrastructureSystems.ProbabilisticMetadata,Any}","page":"API","title":"InfrastructureSystems.set_internal!","text":"set_internal!(value::InfrastructureSystems.ProbabilisticMetadata, val::Any) -> Any\n\n\nSet ProbabilisticMetadata internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_internal!-Tuple{InfrastructureSystems.Scenarios,Any}","page":"API","title":"InfrastructureSystems.set_internal!","text":"set_internal!(value::InfrastructureSystems.Scenarios, val::Any) -> Any\n\n\nSet Scenarios internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_internal!-Tuple{InfrastructureSystems.ScenariosMetadata,Any}","page":"API","title":"InfrastructureSystems.set_internal!","text":"set_internal!(value::InfrastructureSystems.ScenariosMetadata, val::Any) -> Any\n\n\nSet ScenariosMetadata internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_internal!-Tuple{InfrastructureSystems.SingleTimeSeries,Any}","page":"API","title":"InfrastructureSystems.set_internal!","text":"set_internal!(value::InfrastructureSystems.SingleTimeSeries, val::Any) -> Any\n\n\nSet SingleTimeSeries internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_internal!-Tuple{InfrastructureSystems.SingleTimeSeriesMetadata,Any}","page":"API","title":"InfrastructureSystems.set_internal!","text":"set_internal!(value::InfrastructureSystems.SingleTimeSeriesMetadata, val::Any) -> Any\n\n\nSet SingleTimeSeriesMetadata internal.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_interval!-Tuple{InfrastructureSystems.DeterministicMetadata,Any}","page":"API","title":"InfrastructureSystems.set_interval!","text":"set_interval!(value::InfrastructureSystems.DeterministicMetadata, val::Any) -> Any\n\n\nSet DeterministicMetadata interval.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_interval!-Tuple{InfrastructureSystems.DeterministicSingleTimeSeries,Any}","page":"API","title":"InfrastructureSystems.set_interval!","text":"set_interval!(value::InfrastructureSystems.DeterministicSingleTimeSeries, val::Any) -> Any\n\n\nSet DeterministicSingleTimeSeries interval.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_interval!-Tuple{InfrastructureSystems.ProbabilisticMetadata,Any}","page":"API","title":"InfrastructureSystems.set_interval!","text":"set_interval!(value::InfrastructureSystems.ProbabilisticMetadata, val::Any) -> Any\n\n\nSet ProbabilisticMetadata interval.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_interval!-Tuple{InfrastructureSystems.ScenariosMetadata,Any}","page":"API","title":"InfrastructureSystems.set_interval!","text":"set_interval!(value::InfrastructureSystems.ScenariosMetadata, val::Any) -> Any\n\n\nSet ScenariosMetadata interval.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_length!-Tuple{InfrastructureSystems.SingleTimeSeriesMetadata,Any}","page":"API","title":"InfrastructureSystems.set_length!","text":"set_length!(value::InfrastructureSystems.SingleTimeSeriesMetadata, val::Any) -> Any\n\n\nSet SingleTimeSeriesMetadata length.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_name!-Tuple{InfrastructureSystems.Deterministic,Any}","page":"API","title":"InfrastructureSystems.set_name!","text":"set_name!(value::InfrastructureSystems.Deterministic, val::Any) -> Any\n\n\nSet Deterministic name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_name!-Tuple{InfrastructureSystems.DeterministicMetadata,Any}","page":"API","title":"InfrastructureSystems.set_name!","text":"set_name!(value::InfrastructureSystems.DeterministicMetadata, val::Any) -> Any\n\n\nSet DeterministicMetadata name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_name!-Tuple{InfrastructureSystems.Probabilistic,Any}","page":"API","title":"InfrastructureSystems.set_name!","text":"set_name!(value::InfrastructureSystems.Probabilistic, val::Any) -> Any\n\n\nSet Probabilistic name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_name!-Tuple{InfrastructureSystems.ProbabilisticMetadata,Any}","page":"API","title":"InfrastructureSystems.set_name!","text":"set_name!(value::InfrastructureSystems.ProbabilisticMetadata, val::Any) -> Any\n\n\nSet ProbabilisticMetadata name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_name!-Tuple{InfrastructureSystems.Scenarios,Any}","page":"API","title":"InfrastructureSystems.set_name!","text":"set_name!(value::InfrastructureSystems.Scenarios, val::Any) -> Any\n\n\nSet Scenarios name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_name!-Tuple{InfrastructureSystems.ScenariosMetadata,Any}","page":"API","title":"InfrastructureSystems.set_name!","text":"set_name!(value::InfrastructureSystems.ScenariosMetadata, val::Any) -> Any\n\n\nSet ScenariosMetadata name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_name!-Tuple{InfrastructureSystems.SingleTimeSeries,Any}","page":"API","title":"InfrastructureSystems.set_name!","text":"set_name!(value::InfrastructureSystems.SingleTimeSeries, val::Any) -> Any\n\n\nSet SingleTimeSeries name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_name!-Tuple{InfrastructureSystems.SingleTimeSeriesMetadata,Any}","page":"API","title":"InfrastructureSystems.set_name!","text":"set_name!(value::InfrastructureSystems.SingleTimeSeriesMetadata, val::Any) -> Any\n\n\nSet SingleTimeSeriesMetadata name.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_percentiles!-Tuple{InfrastructureSystems.Probabilistic,Any}","page":"API","title":"InfrastructureSystems.set_percentiles!","text":"set_percentiles!(value::InfrastructureSystems.Probabilistic, val::Any) -> Any\n\n\nSet Probabilistic percentiles.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_percentiles!-Tuple{InfrastructureSystems.ProbabilisticMetadata,Any}","page":"API","title":"InfrastructureSystems.set_percentiles!","text":"set_percentiles!(value::InfrastructureSystems.ProbabilisticMetadata, val::Any) -> Any\n\n\nSet ProbabilisticMetadata percentiles.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_resolution!-Tuple{InfrastructureSystems.Deterministic,Any}","page":"API","title":"InfrastructureSystems.set_resolution!","text":"set_resolution!(value::InfrastructureSystems.Deterministic, val::Any) -> Any\n\n\nSet Deterministic resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_resolution!-Tuple{InfrastructureSystems.DeterministicMetadata,Any}","page":"API","title":"InfrastructureSystems.set_resolution!","text":"set_resolution!(value::InfrastructureSystems.DeterministicMetadata, val::Any) -> Any\n\n\nSet DeterministicMetadata resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_resolution!-Tuple{InfrastructureSystems.Probabilistic,Any}","page":"API","title":"InfrastructureSystems.set_resolution!","text":"set_resolution!(value::InfrastructureSystems.Probabilistic, val::Any) -> Any\n\n\nSet Probabilistic resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_resolution!-Tuple{InfrastructureSystems.ProbabilisticMetadata,Any}","page":"API","title":"InfrastructureSystems.set_resolution!","text":"set_resolution!(value::InfrastructureSystems.ProbabilisticMetadata, val::Any) -> Any\n\n\nSet ProbabilisticMetadata resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_resolution!-Tuple{InfrastructureSystems.Scenarios,Any}","page":"API","title":"InfrastructureSystems.set_resolution!","text":"set_resolution!(value::InfrastructureSystems.Scenarios, val::Any) -> Any\n\n\nSet Scenarios resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_resolution!-Tuple{InfrastructureSystems.ScenariosMetadata,Any}","page":"API","title":"InfrastructureSystems.set_resolution!","text":"set_resolution!(value::InfrastructureSystems.ScenariosMetadata, val::Any) -> Any\n\n\nSet ScenariosMetadata resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_resolution!-Tuple{InfrastructureSystems.SingleTimeSeriesMetadata,Any}","page":"API","title":"InfrastructureSystems.set_resolution!","text":"set_resolution!(value::InfrastructureSystems.SingleTimeSeriesMetadata, val::Any) -> Any\n\n\nSet SingleTimeSeriesMetadata resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_scaling_factor_multiplier!-Tuple{InfrastructureSystems.Deterministic,Any}","page":"API","title":"InfrastructureSystems.set_scaling_factor_multiplier!","text":"set_scaling_factor_multiplier!(value::InfrastructureSystems.Deterministic, val::Any) -> Any\n\n\nSet Deterministic scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_scaling_factor_multiplier!-Tuple{InfrastructureSystems.DeterministicMetadata,Any}","page":"API","title":"InfrastructureSystems.set_scaling_factor_multiplier!","text":"set_scaling_factor_multiplier!(value::InfrastructureSystems.DeterministicMetadata, val::Any) -> Any\n\n\nSet DeterministicMetadata scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_scaling_factor_multiplier!-Tuple{InfrastructureSystems.Probabilistic,Any}","page":"API","title":"InfrastructureSystems.set_scaling_factor_multiplier!","text":"set_scaling_factor_multiplier!(value::InfrastructureSystems.Probabilistic, val::Any) -> Any\n\n\nSet Probabilistic scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_scaling_factor_multiplier!-Tuple{InfrastructureSystems.ProbabilisticMetadata,Any}","page":"API","title":"InfrastructureSystems.set_scaling_factor_multiplier!","text":"set_scaling_factor_multiplier!(value::InfrastructureSystems.ProbabilisticMetadata, val::Any) -> Any\n\n\nSet ProbabilisticMetadata scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_scaling_factor_multiplier!-Tuple{InfrastructureSystems.Scenarios,Any}","page":"API","title":"InfrastructureSystems.set_scaling_factor_multiplier!","text":"set_scaling_factor_multiplier!(value::InfrastructureSystems.Scenarios, val::Any) -> Any\n\n\nSet Scenarios scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_scaling_factor_multiplier!-Tuple{InfrastructureSystems.ScenariosMetadata,Any}","page":"API","title":"InfrastructureSystems.set_scaling_factor_multiplier!","text":"set_scaling_factor_multiplier!(value::InfrastructureSystems.ScenariosMetadata, val::Any) -> Any\n\n\nSet ScenariosMetadata scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_scaling_factor_multiplier!-Tuple{InfrastructureSystems.SingleTimeSeries,Any}","page":"API","title":"InfrastructureSystems.set_scaling_factor_multiplier!","text":"set_scaling_factor_multiplier!(value::InfrastructureSystems.SingleTimeSeries, val::Any) -> Any\n\n\nSet SingleTimeSeries scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_scaling_factor_multiplier!-Tuple{InfrastructureSystems.SingleTimeSeriesMetadata,Any}","page":"API","title":"InfrastructureSystems.set_scaling_factor_multiplier!","text":"set_scaling_factor_multiplier!(value::InfrastructureSystems.SingleTimeSeriesMetadata, val::Any) -> Any\n\n\nSet SingleTimeSeriesMetadata scaling_factor_multiplier.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_scenario_count!-Tuple{InfrastructureSystems.Scenarios,Any}","page":"API","title":"InfrastructureSystems.set_scenario_count!","text":"set_scenario_count!(value::InfrastructureSystems.Scenarios, val::Any) -> Any\n\n\nSet Scenarios scenario_count.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_scenario_count!-Tuple{InfrastructureSystems.ScenariosMetadata,Any}","page":"API","title":"InfrastructureSystems.set_scenario_count!","text":"set_scenario_count!(value::InfrastructureSystems.ScenariosMetadata, val::Any) -> Any\n\n\nSet ScenariosMetadata scenario_count.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_single_time_series!-Tuple{InfrastructureSystems.DeterministicSingleTimeSeries,Any}","page":"API","title":"InfrastructureSystems.set_single_time_series!","text":"set_single_time_series!(value::InfrastructureSystems.DeterministicSingleTimeSeries, val::Any) -> Any\n\n\nSet DeterministicSingleTimeSeries single_time_series.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_time_series_uuid!-Tuple{InfrastructureSystems.DeterministicMetadata,Any}","page":"API","title":"InfrastructureSystems.set_time_series_uuid!","text":"set_time_series_uuid!(value::InfrastructureSystems.DeterministicMetadata, val::Any) -> Any\n\n\nSet DeterministicMetadata time_series_uuid.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_time_series_uuid!-Tuple{InfrastructureSystems.ProbabilisticMetadata,Any}","page":"API","title":"InfrastructureSystems.set_time_series_uuid!","text":"set_time_series_uuid!(value::InfrastructureSystems.ProbabilisticMetadata, val::Any) -> Any\n\n\nSet ProbabilisticMetadata time_series_uuid.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_time_series_uuid!-Tuple{InfrastructureSystems.ScenariosMetadata,Any}","page":"API","title":"InfrastructureSystems.set_time_series_uuid!","text":"set_time_series_uuid!(value::InfrastructureSystems.ScenariosMetadata, val::Any) -> Any\n\n\nSet ScenariosMetadata time_series_uuid.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.set_time_series_uuid!-Tuple{InfrastructureSystems.SingleTimeSeriesMetadata,Any}","page":"API","title":"InfrastructureSystems.set_time_series_uuid!","text":"set_time_series_uuid!(value::InfrastructureSystems.SingleTimeSeriesMetadata, val::Any) -> Any\n\n\nSet SingleTimeSeriesMetadata time_series_uuid.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.show_recorder_events-Union{Tuple{T}, Tuple{Type{T},AbstractString}, Tuple{Type{T},AbstractString,Union{Nothing, Function}}} where T<:InfrastructureSystems.AbstractRecorderEvent","page":"API","title":"InfrastructureSystems.show_recorder_events","text":"Show the events of type T in filename in a table. Refer to PrettyTables.jl documentation for accepted kwargs.\n\nArguments\n\nT: event type\nfilename::AbstractString: filename containing recorder events\nfilter_func::Union{Nothing, Function} = nothing: Optional function that accepts an event  of type T and returns a Bool. Apply this function to each event and only return events  where the result is true.\nkwargs: Passed to PrettyTables\n\nExamples\n\nshow_recorder_events(TestEvent, test_recorder.log)\nshow_recorder_events(TestEvent, test_recorder.log; x -> x.val2 > 2)\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.strip_module_name-Tuple{String}","page":"API","title":"InfrastructureSystems.strip_module_name","text":"strip_module_name(name::String) -> String\n\n\nStrips the module name off of a type.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.supertypes-Union{Tuple{Type{T}}, Tuple{T}, Tuple{Type{T},Any}} where T","page":"API","title":"InfrastructureSystems.supertypes","text":"supertypes(::Type{T}) -> Array{Any,1}\nsupertypes(::Type{T}, types::Any) -> Any\n\n\nReturns an array of all super types of T.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.tail-Tuple{InfrastructureSystems.SingleTimeSeries}","page":"API","title":"InfrastructureSystems.tail","text":"tail(time_series::InfrastructureSystems.SingleTimeSeries) -> Any\n\n\nReturn a time_series with only the ending num values.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.test_generated_structs-Tuple{Any,Any}","page":"API","title":"InfrastructureSystems.test_generated_structs","text":"test_generated_structs(descriptor_file::Any, existing_dir::Any) -> Bool\n\n\nReturn true if the structs defined in existingdir match structs freshly-generated from descriptorfile.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.to-Tuple{InfrastructureSystems.SingleTimeSeries,Any}","page":"API","title":"InfrastructureSystems.to","text":"to(time_series::InfrastructureSystems.SingleTimeSeries, timestamp::Any) -> InfrastructureSystems.SingleTimeSeries\n\n\nReturn a time_series truncated after timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.to_json-Union{Tuple{T}, Tuple{T,AbstractString}} where T<:InfrastructureSystems.InfrastructureSystemsType","page":"API","title":"InfrastructureSystems.to_json","text":"to_json(obj::T<:InfrastructureSystems.InfrastructureSystemsType) -> String\n\n\nSerializes a InfrastructureSystemsType to a JSON file.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.to_json-Union{Tuple{T}, Tuple{T}} where T<:InfrastructureSystems.InfrastructureSystemsType","page":"API","title":"InfrastructureSystems.to_json","text":"Serializes a InfrastructureSystemsType to a JSON string.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.transform_single_time_series!-Union{Tuple{T}, Tuple{InfrastructureSystems.InfrastructureSystemsComponent,Type{T},InfrastructureSystems.TimeSeriesParameters}} where T<:InfrastructureSystems.DeterministicSingleTimeSeries","page":"API","title":"InfrastructureSystems.transform_single_time_series!","text":"transform_single_time_series!(component::InfrastructureSystems.InfrastructureSystemsComponent, _::Type{T<:InfrastructureSystems.DeterministicSingleTimeSeries}, sys_params::InfrastructureSystems.TimeSeriesParameters)\n\n\nTransform all instances of SingleTimeSeries to DeterministicSingleTimeSeries.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.transform_single_time_series!-Union{Tuple{T}, Tuple{InfrastructureSystems.SystemData,Type{T},Int64,Dates.Period}} where T<:InfrastructureSystems.DeterministicSingleTimeSeries","page":"API","title":"InfrastructureSystems.transform_single_time_series!","text":"transform_single_time_series!(data::InfrastructureSystems.SystemData, _::Type{T<:InfrastructureSystems.DeterministicSingleTimeSeries}, horizon::Int64, interval::Dates.Period)\n\n\nTransform all instances of SingleTimeSeries to DeterministicSingleTimeSeries.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.type_to_symbol-Tuple{DataType}","page":"API","title":"InfrastructureSystems.type_to_symbol","text":"type_to_symbol(data_type::DataType) -> Symbol\n\n\nConverts a DataType to a Symbol, stripping off the module name(s).\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.unregister_recorder!-Tuple{Symbol}","page":"API","title":"InfrastructureSystems.unregister_recorder!","text":"unregister_recorder!(name::Symbol; close_io) -> Any\n\n\nUnregister the recorder with this name and stop recording events.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.validate_components-Tuple{InfrastructureSystems.Components}","page":"API","title":"InfrastructureSystems.validate_components","text":"validate_components(components::InfrastructureSystems.Components)\n\n\nIterates over all components and throws InvalidRange if any of the component's field values are outside of defined valid range.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.validate_exported_names-Tuple{Module}","page":"API","title":"InfrastructureSystems.validate_exported_names","text":"validate_exported_names(mod::Module) -> Bool\n\n\nReturn true if all publicly exported names in mod are defined.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.validate_struct-Tuple{InfrastructureSystems.InfrastructureSystemsType}","page":"API","title":"InfrastructureSystems.validate_struct","text":"validate_struct(ist::InfrastructureSystems.InfrastructureSystemsType) -> Bool\n\n\nValidates a struct.\n\n\n\n\n\n","category":"method"},{"location":"api/InfrastructureSystems/#InfrastructureSystems.when-Tuple{InfrastructureSystems.SingleTimeSeries,Function,Integer}","page":"API","title":"InfrastructureSystems.when","text":"when(time_series::InfrastructureSystems.SingleTimeSeries, period::Function, t::Integer) -> Any\n\n\nRefer to TimeSeries.when(). Underlying data is copied.\n\n\n\n\n\n","category":"method"},{"location":"user_guide/guide/#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"user_guide/guide/#Component-structs","page":"User Guide","title":"Component structs","text":"","category":"section"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"InfrastructureSystems provides a common way of managing component structs in a system.","category":"page"},{"location":"user_guide/guide/#Type-hierachy","page":"User Guide","title":"Type hierachy","text":"","category":"section"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"Make every component a subtype of InfrastructureSystemsComponent.","category":"page"},{"location":"user_guide/guide/#Interface-requirements","page":"User Guide","title":"Interface requirements","text":"","category":"section"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"Implement a get_name(c::MyComponent)::String method for every struct.","category":"page"},{"location":"user_guide/guide/#InfrastructureSystemsInternal","page":"User Guide","title":"InfrastructureSystemsInternal","text":"","category":"section"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"Add this struct to every component struct.","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"It automatically creates a UUID for the component. This guarantees a unique way to identify the component.\nIt optionally provides an extension dictionary for user data. A user extending your package may want to use your struct but need one more field. Rather than create a new type they can add data to this ext object.","category":"page"},{"location":"user_guide/guide/#Instructions","page":"User Guide","title":"Instructions","text":"","category":"section"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"Add the field to your struct. The constructor does not take any parameters.","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"struct MyComponent\n    internal::InfrastructureSystemsInternal\nend\n\n# Optional\nget_ext(c::MyComponent) = InfrastructureSystems.get_ext(c.ext)\nclear_ext!(c::MyComponent) = InfrastructureSystems.clear_ext(c.ext)","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"Notes:","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"InfrastructureSystems.get_uuid(obj::InfrastructureSystemsComponent) returns the component UUID.\nThe extension dictionary is not created until the first time get_ext is called.","category":"page"},{"location":"user_guide/guide/#Auto-Generation-of-component-structs","page":"User Guide","title":"Auto-Generation of component structs","text":"","category":"section"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"InfrastructureSystems provides a mechanism to auto-generate Julia files containing structs and field accessor functions from JSON descriptors. Here are reasons to consider using this approach:","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"Auto-generation allows for easy refactoring of code. Adding fields to many structs can be tedious because you might have to edit many constructors. This process eliminates boiler-plate edits.\nThe JSON descriptor format includes a mechanisim to define range validation on component fields. Validation can be enabled when adding components to a system.\nProvides consistent formatting of structs, fields, and constructors.\nProvides consistent documentation of structs and fields.","category":"page"},{"location":"user_guide/guide/#Instructions-2","page":"User Guide","title":"Instructions","text":"","category":"section"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"Create the JSON descriptor file. Follow the PowerSystems.jl example.\nRun the generation script, passing your descriptor file and an output directory.","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"InfrastructureSystems.generate_structs(\"./src/descriptors/power_system_structs.json\", \"./src/models/generated\")","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"Notes:","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"The code generation template provides several options which are not yet formally documented. Browse the PowerSystems example or the generation script.\nYou will need to decide how to manage the generated files. The PowerSystems package keeps the generated code in the git repository. This is not required. You could choose to generate them at startup.\nYou may need to create custom constructors and this approach will not allow you have put them in the same file as the struct definition.","category":"page"},{"location":"user_guide/guide/#Component-time-series-data","page":"User Guide","title":"Component time series data","text":"","category":"section"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"InfrastructureSystems provides a mechanism to store time series data for components. Here are reasons to consider using it:","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"Time series data, by default, is stored independently of components in HDF5 files. Components store references to that data.\nSystem memory is not depleted by loading all time series data at once. Only data that you need is loaded.\nMultiple components can share the same time series data by sharing references instead of making expensive copies.\nSupports serialization and deserialization.\nSupports parsing raw data files of several formats as well as data stored in TimeSeries.TimeArray and DataFrames.DataFrame objects.","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":":warning: You must reimplement deepcopy if you use HDF5","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"If you store an instance of SystemData within your system and then a user calls deepcopy on a system, the .h5 file will not be copied. The new and old instances will have references to the same file. You will need to reimplement deepcopy to handle this. One solution is to serialize and then deserialize the system.","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"Notes:","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"Time series data can optionally be stored fully in memory. Refer to the","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"SystemData documentation.","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"InfrastructureSystems creates HDF5 files on the tmp filesystem by default. This can be changed if the time series data is larger than the amount of tmp space available. Refer to the SystemData link above.","category":"page"},{"location":"user_guide/guide/#Instructions-3","page":"User Guide","title":"Instructions","text":"","category":"section"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"Add an instance of InfrastructureSystems.TimeSeriesContainer to the component struct.\nImplement the method InfrastructureSystems.get_time_series_container for the component. It must return the TimeSeriesContainer object.","category":"page"},{"location":"user_guide/guide/#Component-container","page":"User Guide","title":"Component container","text":"","category":"section"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"InfrastructureSystems provides the SystemData struct to store a collection of components.","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"It is recommended but not required that you include this struct within your own   system struct for these reasons:","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"Provides search and iteration with get_component and get_components for abstract and concrete types.\nEnforces name uniqueness within a concrete type.\nAllows for component field validation.\nEnables component JSON serialization and deserialization.","category":"page"},{"location":"user_guide/guide/#Instructions-4","page":"User Guide","title":"Instructions","text":"","category":"section"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"Add an instance of SystemData to your system struct.\nOptionally pass a component validation descriptor file to the constructor.\nOptionally pass time_series_in_memory = true to the constructor if you know that all time series data will fit in memory and want a performance boost.\nRedirect these function calls to your instance of SystemData.\nadd_component!\nremove_component!\nget_component\nget_components\nget_components_by_name\nadd_time_series!","category":"page"},{"location":"user_guide/guide/#Logging","page":"User Guide","title":"Logging","text":"","category":"section"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"InfrastructureSystems provides a MultiLogger object that allows customized logging to console and file. Refer to the logging documentation.","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"If you want to create a package-specific log file during a simulation, consider the workflow used by PowerSimulations.jl. It creates a custom logger in its build!(Simulation) function and then uses Julia's Logging.with_logger function to temporarily take over the global logger during build() and execute().","category":"page"},{"location":"user_guide/guide/#Recorder-events","page":"User Guide","title":"Recorder events","text":"","category":"section"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"InfrastructureSystems provides a mechanism to store structured data in events that get recorded in one or more files. They can be filtered and displayed in tabular form.","category":"page"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"The primary use is to store information that can help debug problems.  For example, you may want to store all state transitions in a simulation or every update of a variable.  If a problem occurs you can then display filtered tables of that data to figure out what went wrong.","category":"page"},{"location":"user_guide/guide/#Instructions-5","page":"User Guide","title":"Instructions","text":"","category":"section"},{"location":"user_guide/guide/","page":"User Guide","title":"User Guide","text":"Create events that are subtypes of InfrastructureSystems.AbstractRecorderEvent. Include an instance of RecorderEventCommon in each struct.\nCall InfrastructureSystems.register_recorder(<recorder-name>) for each recorder object you want to create.\nDepending on how often your code create events you may want to make this conditional. You may only need it for debug runs.\nPowerSimulations creates one recorder for simulation step and stage start/stop events that is always enabled. It creates another that is optional but used for frequently-generated events.\nCall @InfrastructureSystems.record <recorder-name> <event> wherever you want to generate events in your code. The event will only get constructed if the recorder is registered.\nCall InfrastructureSystems.unregister_recorder(<recorder-name>) for each registered recorder. You should guarantee this this gets called, even if an exception is thrown.  Otherwise, the file may not get flushed and closed.\nAfter your code runs call InfrastructureSystems.show_recorder_events to view events.  Refer to the docstrings for more information.\nRefer to PowerSimulations.showsimulationevents for an example on how to customize this behavior for your package.","category":"page"},{"location":"#InfrastructureSystems.jl","page":"Welcome Page","title":"InfrastructureSystems.jl","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"CurrentModule = InfrastructureSystems","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"The Documentation is still under construction, some sections are unfinished. The available methods have autogenerated documentation in the internal API section","category":"page"},{"location":"#Overview","page":"Welcome Page","title":"Overview","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"InfrastructureSystems.jl is a Julia package that utilities for the packages in NREL's SIIP Initiative. This package is meant for package development. It is used primarily by PowerSystems.jl and PowerSimulations.jl but is written to be extensible for other kinds of applications as well within.","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"This document describes how to integrate it with other packages.","category":"page"},{"location":"docs/#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"docs/#Requirements","page":"Documentation","title":"Requirements","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Pkg.add(\"Documenter\")","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"pip install ghp-import","category":"page"},{"location":"docs/#Run","page":"Documentation","title":"Run","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"cd docs\nmake html\nopen build/index.html","category":"page"},{"location":"user_guide/tests/#Running-Tests","page":"Running Tests","title":"Running Tests","text":"","category":"section"},{"location":"user_guide/tests/","page":"Running Tests","title":"Running Tests","text":"Unit tests can be executed in the REPL by executing the following:","category":"page"},{"location":"user_guide/tests/","page":"Running Tests","title":"Running Tests","text":"julia> include(\"test/runtests.jl\")","category":"page"},{"location":"user_guide/tests/","page":"Running Tests","title":"Running Tests","text":"The unit test module supports several customizations to aid development and debug.","category":"page"},{"location":"user_guide/tests/","page":"Running Tests","title":"Running Tests","text":"Run a subset of tests in the REPL:","category":"page"},{"location":"user_guide/tests/","page":"Running Tests","title":"Running Tests","text":"julia> push!(ARGS, \"<test_filename_without_.jl>\")\njulia> include(\"test/runtests.jl\")","category":"page"},{"location":"user_guide/tests/","page":"Running Tests","title":"Running Tests","text":"Change console logging level (defaults to Error):","category":"page"},{"location":"user_guide/tests/","page":"Running Tests","title":"Running Tests","text":"julia> ENV[\"PS_CONSOLE_LOG_LEVEL\"] = Info\njulia> include(\"test/runtests.jl\")","category":"page"},{"location":"user_guide/tests/","page":"Running Tests","title":"Running Tests","text":"Change log file (./power-systems.log) logging level (defaults to Info):","category":"page"},{"location":"user_guide/tests/","page":"Running Tests","title":"Running Tests","text":"julia> ENV[\"PS_LOG_LEVEL\"] = Debug\njulia> include(\"test/runtests.jl\")","category":"page"},{"location":"user_guide/tests/","page":"Running Tests","title":"Running Tests","text":"The unit test module appends a summary of all log message counts to the log file.  If a message is logged too frequently then consider tagging that message with maxlog=X to suppress it.","category":"page"}]
}
